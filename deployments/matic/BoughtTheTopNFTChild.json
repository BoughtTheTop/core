{
  "address": "0x386d661252e4bebab2fD9683538905e4eB0cd0DE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "BaseTokenURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "MintFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "set",
          "type": "address"
        }
      ],
      "name": "OnBurnChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "set",
          "type": "address"
        }
      ],
      "name": "OnMintChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "set",
          "type": "address"
        }
      ],
      "name": "OnTransferChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "metaData",
          "type": "bytes"
        }
      ],
      "name": "TransferWithMetadata",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "WithdrawnBatch",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BATCH_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "encodeTokenMetadata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "extra",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "extra",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onBurn",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onMint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onTransfer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "set",
          "type": "address"
        }
      ],
      "name": "setOnBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "set",
          "type": "address"
        }
      ],
      "name": "setOnMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "set",
          "type": "address"
        }
      ],
      "name": "setOnTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawWithMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawnTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x98f585da9f6790ef154499644ddadf620c23f7af26a2c827a3cea69abbdf43a9",
  "receipt": {
    "to": null,
    "from": "0x761496379064d3D49Da3b623017CB00421cc8980",
    "contractAddress": "0x386d661252e4bebab2fD9683538905e4eB0cd0DE",
    "transactionIndex": 0,
    "gasUsed": "3646002",
    "logsBloom": "0x
    "blockHash": "0x14739bf82efb38bfc1e4292b091a47626e21d00cdba149063acf001fb798f3d1",
    "transactionHash": "0x98f585da9f6790ef154499644ddadf620c23f7af26a2c827a3cea69abbdf43a9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12800785,
        "transactionHash": "0x98f585da9f6790ef154499644ddadf620c23f7af26a2c827a3cea69abbdf43a9",
        "address": "0x386d661252e4bebab2fD9683538905e4eB0cd0DE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000761496379064d3d49da3b623017cb00421cc8980",
          "0x000000000000000000000000761496379064d3d49da3b623017cb00421cc8980"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x14739bf82efb38bfc1e4292b091a47626e21d00cdba149063acf001fb798f3d1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12800785,
        "transactionHash": "0x98f585da9f6790ef154499644ddadf620c23f7af26a2c827a3cea69abbdf43a9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000761496379064d3d49da3b623017cb00421cc8980",
          "0x0000000000000000000000008102d152044ee0171ee460eff9b8c199ef6856c8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000cf404fe0f740000000000000000000000000000000000000000000000011e7556bf3dd7ee8f230000000000000000000000000000000000000000000000060869771198a72dfd00000000000000000000000000000000000000000000011e7549cb38d9df1b2300000000000000000000000000000000000000000000000608766b1696b6a1fd",
        "logIndex": 1,
        "blockHash": "0x14739bf82efb38bfc1e4292b091a47626e21d00cdba149063acf001fb798f3d1"
      }
    ],
    "blockNumber": 12800785,
    "cumulativeGasUsed": "3646002",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "26f6a656a41aefddab40d92ccdd59abd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"BaseTokenURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"MintFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"set\",\"type\":\"address\"}],\"name\":\"OnBurnChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"set\",\"type\":\"address\"}],\"name\":\"OnMintChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"set\",\"type\":\"address\"}],\"name\":\"OnTransferChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metaData\",\"type\":\"bytes\"}],\"name\":\"TransferWithMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawnBatch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encodeTokenMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extra\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extra\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onBurn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onTransfer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"set\",\"type\":\"address\"}],\"name\":\"setOnBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"set\",\"type\":\"address\"}],\"name\":\"setOnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"set\",\"type\":\"address\"}],\"name\":\"setOnTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawWithMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator. - {burnAllowed} must be true\"},\"constructor\":{\"details\":\"Initialize contract, owner will be set to the account that deploys the contract.\"},\"deposit(address,bytes)\":{\"details\":\"Should be callable only by ChildChainManager Should handle deposit by minting the required tokenId(s) for user Should set `withdrawnTokens` mapping to `false` for the tokenId being deposited Minting can also be done by other functions\",\"params\":{\"depositData\":\"abi encoded tokenIds. Batch deposit also supported.\",\"user\":\"user address for whom deposit is being done\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Creates a new token for caller with ID `tokenId` using an off-chain signature  See {ERC721-_mint}. Requirements: - caller is owner of token - {mintFee} wei sent with call if caller does not have `MINTER_ROLE` - signature v, r, s must be signed by account with `MINTER_ROLE`\"},\"mintTo(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Creates a new token for `to` with ID `tokenId` using an off-chain signature See {ERC721-_mint}. Requirements: - {mintFee} wei sent with call if caller does not have `MINTER_ROLE` - signature v, r, s must be signed by account with `MINTER_ROLE`\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"rescue(address)\":{\"details\":\"Rescue any ERC-20 token the contract may hold\",\"params\":{\"_token\":\"ERC-20 token address Requirements: - the caller must have the `WITHDRAW_ROLE`.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseTokenURI(string)\":{\"details\":\"Set the base URI for all tokens. See {ERC721-tokenURI} Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.\"},\"setMintFee(uint256)\":{\"details\":\"Set the fee to mint a new token. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.\"},\"setOnBurn(address)\":{\"details\":\"Set burn extra logic cotnract Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.\"},\"setOnMint(address)\":{\"details\":\"Set mint extra logic cotnract Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.\"},\"setOnTransfer(address)\":{\"details\":\"Set transfer extra logic contract Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"withdraw(uint256)\":{\"details\":\"Should handle withraw by burning user's token. Should set `withdrawnTokens` mapping to `true` for the tokenId being withdrawn This transaction will be verified when exiting on root chain\",\"params\":{\"tokenId\":\"tokenId to withdraw\"}},\"withdrawBatch(uint256[])\":{\"details\":\"Should burn user's tokens. This transaction will be verified when exiting on root chain\",\"params\":{\"tokenIds\":\"tokenId list to withdraw\"}},\"withdrawFees()\":{\"details\":\"Withdraw all accumulated ether from the contract Requirements: - the caller must have the `WITHDRAW_ROLE`.\"},\"withdrawWithMetadata(uint256)\":{\"details\":\"Should handle withraw by burning user's token. Should set `withdrawnTokens` mapping to `true` for the tokenId being withdrawn This transaction will be verified when exiting on root chain\",\"params\":{\"tokenId\":\"tokenId to withdraw\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BaseTokenURIChanged(string)\":{\"notice\":\"Emitted when the base token URI changes\"},\"FeesWithdrawn(uint256)\":{\"notice\":\"Emitted when fees are withdrawn\"},\"MintFeeChanged(uint256)\":{\"notice\":\"Emitted when the {mintFee} changes\"},\"OnBurnChanged(address)\":{\"notice\":\"Emitted when {onBurn} changes\"},\"OnMintChanged(address)\":{\"notice\":\"Emitted when {onMint} changes\"},\"OnTransferChanged(address)\":{\"notice\":\"Emitted when {onTransfer} changes\"},\"TransferWithMetadata(address,address,uint256,bytes)\":{\"notice\":\"Emitted when an NFT is withdrawn\"},\"WithdrawnBatch(address,uint256[])\":{\"notice\":\"Emitted when multiple NFTs are withdrawn\"}},\"kind\":\"user\",\"methods\":{\"BATCH_LIMIT()\":{\"notice\":\"Maxmimum number of NFTs that can be transferred in a batch due to gas limit restrictions\"},\"DEPOSITOR_ROLE()\":{\"notice\":\"Role identifier for cross-chain depositor\"},\"MINTER_ROLE()\":{\"notice\":\"Role identifer for minter\"},\"MINT_TYPEHASH()\":{\"notice\":\"EIP-712 typehash for mint\"},\"WITHDRAW_ROLE()\":{\"notice\":\"Role identifier for fee withdrawer\"},\"baseTokenURI()\":{\"notice\":\"Base of metdata URI\"},\"deposit(address,bytes)\":{\"notice\":\"called when token is deposited on root chain\"},\"encodeTokenMetadata(uint256)\":{\"notice\":\"This method is supposed to be called by client when withdrawing token with metadata and pass return value of this function as second paramter of `withdrawWithMetadata` method It can be overridden by clients to encode data in a different form, which needs to be decoded back by them correctly during exiting\"},\"mintFee()\":{\"notice\":\"Ether fee to mint a new NFT\"},\"onBurn()\":{\"notice\":\"Contract to handle extra burn logic\"},\"onMint()\":{\"notice\":\"Contract to handle extra mint logic\"},\"onTransfer()\":{\"notice\":\"Contract to handle extra transfer logic\"},\"withdraw(uint256)\":{\"notice\":\"called when user wants to withdraw token back to root chain\"},\"withdrawBatch(uint256[])\":{\"notice\":\"called when user wants to withdraw multiple tokens back to root chain\"},\"withdrawWithMetadata(uint256)\":{\"notice\":\"called when user wants to withdraw token back to root chain with token URI\"},\"withdrawnTokens(uint256)\":{\"notice\":\"NFTs that have been withdrawn to the root chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BoughtTheTopNFTChild.sol\":\"BoughtTheTopNFTChild\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"contracts/BoughtTheTopNFTChild.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC721/ERC721.sol\\\";\\r\\nimport \\\"./ERC721/ERC721Enumerable.sol\\\";\\r\\nimport \\\"./ERC20/IERC20.sol\\\";\\r\\nimport \\\"./access/AccessControl.sol\\\";\\r\\nimport \\\"./utils/Context.sol\\\";\\r\\nimport \\\"./utils/cryptography/EIP712.sol\\\";\\r\\nimport \\\"./child/IChildToken.sol\\\";\\r\\nimport \\\"./IOnMint.sol\\\";\\r\\nimport \\\"./IOnBurn.sol\\\";\\r\\nimport \\\"./IOnTransfer.sol\\\";\\r\\n\\r\\ncontract BoughtTheTopNFTChild is Context, AccessControl, ERC721Enumerable, EIP712, IChildToken {\\r\\n\\r\\n    /// @notice Base of metdata URI\\r\\n    string public baseTokenURI;\\r\\n\\r\\n    /// @notice Ether fee to mint a new NFT\\r\\n    uint256 public mintFee;\\r\\n\\r\\n    /// @notice Contract to handle extra mint logic\\r\\n    address public onMint;\\r\\n\\r\\n    /// @notice Contract to handle extra burn logic\\r\\n    address public onBurn;\\r\\n\\r\\n    /// @notice Contract to handle extra transfer logic\\r\\n    address public onTransfer;\\r\\n\\r\\n    /// @notice NFTs that have been withdrawn to the root chain\\r\\n    mapping (uint256 => bool) public withdrawnTokens;\\r\\n\\r\\n    /// @notice Maxmimum number of NFTs that can be transferred in a batch due to gas limit restrictions\\r\\n    uint256 public constant BATCH_LIMIT = 20;\\r\\n\\r\\n    /// @notice EIP-712 typehash for mint\\r\\n    bytes32 public constant MINT_TYPEHASH = keccak256(\\\"Mint(address to,uint256 tokenId,uint256 extra)\\\");\\r\\n\\r\\n    /// @notice Role identifer for minter\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    /// @notice Role identifier for fee withdrawer\\r\\n    bytes32 public constant WITHDRAW_ROLE = keccak256(\\\"WITHDRAW_ROLE\\\");\\r\\n\\r\\n    /// @notice Role identifier for cross-chain depositor\\r\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\r\\n    \\r\\n    /// @notice Emitted when the base token URI changes\\r\\n    event BaseTokenURIChanged(string uri);\\r\\n\\r\\n    /// @notice Emitted when fees are withdrawn\\r\\n    event FeesWithdrawn(uint256 amount);\\r\\n\\r\\n    /// @notice Emitted when the {mintFee} changes\\r\\n    event MintFeeChanged(uint256 fee);\\r\\n\\r\\n    /// @notice Emitted when {onMint} changes\\r\\n    event OnMintChanged(address set);\\r\\n\\r\\n    /// @notice Emitted when {onBurn} changes\\r\\n    event OnBurnChanged(address set);\\r\\n\\r\\n    /// @notice Emitted when {onTransfer} changes\\r\\n    event OnTransferChanged(address set);\\r\\n\\r\\n    /// @notice Emitted when multiple NFTs are withdrawn\\r\\n    event WithdrawnBatch(address indexed user, uint256[] tokenIds);\\r\\n\\r\\n    /// @notice Emitted when an NFT is withdrawn\\r\\n    event TransferWithMetadata(address indexed from, address indexed to, uint256 indexed tokenId, bytes metaData);\\r\\n\\r\\n    /**\\r\\n     * @dev Initialize contract, owner will be set to the\\r\\n     * account that deploys the contract.\\r\\n     */\\r\\n    constructor() ERC721(\\\"BoughtThe.top NFT\\\", \\\"BTT\\\") EIP712(\\\"BoughtThe.top NFT\\\", \\\"1\\\") {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n\\r\\n        mintFee = 0.01 ether;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseTokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the base URI for all tokens.\\r\\n     *\\r\\n     * See {ERC721-tokenURI}\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `DEFAULT_ADMIN_ROLE`.\\r\\n     */\\r\\n    function setBaseTokenURI(string calldata uri) public {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"BoughtTheTopNFT: must have admin role\\\");\\r\\n\\r\\n        baseTokenURI = uri;\\r\\n        emit BaseTokenURIChanged(uri);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the fee to mint a new token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `DEFAULT_ADMIN_ROLE`.\\r\\n     */\\r\\n    function setMintFee(uint256 fee) public {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"BoughtTheTopNFT: must have admin role\\\");\\r\\n\\r\\n        mintFee = fee;\\r\\n        emit MintFeeChanged(fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set mint extra logic cotnract\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `DEFAULT_ADMIN_ROLE`.\\r\\n     */\\r\\n    function setOnMint(address set) public {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"BoughtTheTopNFT: must have admin role\\\");\\r\\n\\r\\n        onMint = set;\\r\\n        emit OnMintChanged(set);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set burn extra logic cotnract\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `DEFAULT_ADMIN_ROLE`.\\r\\n     */\\r\\n    function setOnBurn(address set) public {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"BoughtTheTopNFT: must have admin role\\\");\\r\\n\\r\\n        onBurn = set;\\r\\n        emit OnBurnChanged(set);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set transfer extra logic contract\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `DEFAULT_ADMIN_ROLE`.\\r\\n     */\\r\\n    function setOnTransfer(address set) public {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"BoughtTheTopNFT: must have admin role\\\");\\r\\n\\r\\n        onTransfer = set;\\r\\n        emit OnTransferChanged(set);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw all accumulated ether from the contract\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `WITHDRAW_ROLE`.\\r\\n     */\\r\\n    function withdrawFees() public {\\r\\n        require(hasRole(WITHDRAW_ROLE, _msgSender()), \\\"BoughtTheTopNFT: must have withdraw role\\\");\\r\\n\\r\\n        uint256 amount = address(this).balance;\\r\\n        payable(_msgSender()).transfer(amount);\\r\\n        emit FeesWithdrawn(amount);\\r\\n    }\\r\\n\\r\\n    function _mintBySignature(address to, uint256 tokenId, uint256 extra, uint8 v, bytes32 r, bytes32 s) internal {\\r\\n        require(!withdrawnTokens[tokenId], \\\"BoughtTheTopNFT: token exists on root chain\\\");\\r\\n\\r\\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\r\\n            MINT_TYPEHASH,\\r\\n            to,\\r\\n            tokenId,\\r\\n            extra\\r\\n        )));\\r\\n        address signer = ECDSA.recover(digest, v, r, s);\\r\\n        require(hasRole(MINTER_ROLE, signer), \\\"BoughtTheTopNFT: must have minter role\\\");\\r\\n\\r\\n        // minters may mint for free\\r\\n        if (!hasRole(MINTER_ROLE, _msgSender())) {\\r\\n            require(msg.value == mintFee, \\\"BoughtTheTopNFT: incorrect mint fee provided\\\");\\r\\n        }\\r\\n\\r\\n        if (onMint != address(0))\\r\\n            IOnMint(onMint).onMint(_msgSender(), to, tokenId, extra);\\r\\n\\r\\n        _mint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new token for `to` with ID `tokenId` using an off-chain signature\\r\\n     *\\r\\n     * See {ERC721-_mint}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - {mintFee} wei sent with call if caller does not have `MINTER_ROLE`\\r\\n     * - signature v, r, s must be signed by account with `MINTER_ROLE`\\r\\n     */\\r\\n    function mintTo(address to, uint256 tokenId, uint256 extra, uint8 v, bytes32 r, bytes32 s) public payable {\\r\\n        _mintBySignature(to, tokenId, extra, v, r, s);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new token for caller with ID `tokenId` using an off-chain signature \\r\\n     *\\r\\n     * See {ERC721-_mint}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - caller is owner of token\\r\\n     * - {mintFee} wei sent with call if caller does not have `MINTER_ROLE`\\r\\n     * - signature v, r, s must be signed by account with `MINTER_ROLE`\\r\\n     */\\r\\n    function mint(uint256 tokenId, uint256 extra, uint8 v, bytes32 r, bytes32 s) public payable {\\r\\n        _mintBySignature(_msgSender(), tokenId, extra, v, r, s);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own `tokenId` or be an approved operator.\\r\\n     * - {burnAllowed} must be true\\r\\n     */\\r\\n    function burn(uint256 tokenId) public virtual {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\r\\n\\r\\n        if (onBurn != address(0))\\r\\n            IOnBurn(onBurn).onBurn(tokenId);\\r\\n\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl, ERC721Enumerable) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721Enumerable) {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (onTransfer != address(0))\\r\\n            IOnTransfer(onTransfer).onTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Rescue any ERC-20 token the contract may hold\\r\\n     *\\r\\n     * @param _token ERC-20 token address\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `WITHDRAW_ROLE`.\\r\\n     */\\r\\n    function rescue(address _token) public {\\r\\n        require(hasRole(WITHDRAW_ROLE, _msgSender()), \\\"BoughtTheTopNFT: must have withdraw role\\\");\\r\\n        IERC20 token = IERC20(_token);\\r\\n        token.transfer(_msgSender(), token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice called when token is deposited on root chain\\r\\n     * @dev Should be callable only by ChildChainManager\\r\\n     * Should handle deposit by minting the required tokenId(s) for user\\r\\n     * Should set `withdrawnTokens` mapping to `false` for the tokenId being deposited\\r\\n     * Minting can also be done by other functions\\r\\n     * @param user user address for whom deposit is being done\\r\\n     * @param depositData abi encoded tokenIds. Batch deposit also supported.\\r\\n     */\\r\\n    function deposit(address user, bytes calldata depositData) external override {\\r\\n        require(hasRole(DEPOSITOR_ROLE, _msgSender()), \\\"BoughtTheTopNFT: must have depositor role\\\");\\r\\n        // deposit single\\r\\n        if (depositData.length == 32) {\\r\\n            uint256 tokenId = abi.decode(depositData, (uint256));\\r\\n            withdrawnTokens[tokenId] = false;\\r\\n            _mint(user, tokenId);\\r\\n\\r\\n        // deposit batch\\r\\n        } else {\\r\\n            uint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\\r\\n            uint256 length = tokenIds.length;\\r\\n            for (uint256 i; i < length; i++) {\\r\\n                withdrawnTokens[tokenIds[i]] = false;\\r\\n                _mint(user, tokenIds[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice called when user wants to withdraw token back to root chain\\r\\n     * @dev Should handle withraw by burning user's token.\\r\\n     * Should set `withdrawnTokens` mapping to `true` for the tokenId being withdrawn\\r\\n     * This transaction will be verified when exiting on root chain\\r\\n     * @param tokenId tokenId to withdraw\\r\\n     */\\r\\n    function withdraw(uint256 tokenId) external {\\r\\n        require(_msgSender() == ownerOf(tokenId), \\\"BoughtTheTopNFT: invalid token owner\\\");\\r\\n        withdrawnTokens[tokenId] = true;\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice called when user wants to withdraw multiple tokens back to root chain\\r\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\r\\n     * @param tokenIds tokenId list to withdraw\\r\\n     */\\r\\n    function withdrawBatch(uint256[] calldata tokenIds) external {\\r\\n\\r\\n        uint256 length = tokenIds.length;\\r\\n        require(length <= BATCH_LIMIT, \\\"BoughtTheTopNFT: exceeds batch limit\\\");\\r\\n\\r\\n        // Iteratively burn ERC721 tokens, for performing\\r\\n        // batch withdraw\\r\\n        for (uint256 i; i < length; i++) {\\r\\n\\r\\n            uint256 tokenId = tokenIds[i];\\r\\n\\r\\n            require(_msgSender() == ownerOf(tokenId), string(abi.encodePacked(\\\"BoughtTheTopNFT: invalid token owner \\\", tokenId)));\\r\\n            withdrawnTokens[tokenId] = true;\\r\\n            _burn(tokenId);\\r\\n        }\\r\\n\\r\\n        // At last emit this event, which will be used\\r\\n        // in MintableERC721 predicate contract on L1\\r\\n        // while verifying burn proof\\r\\n        emit WithdrawnBatch(_msgSender(), tokenIds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice called when user wants to withdraw token back to root chain with token URI\\r\\n     * @dev Should handle withraw by burning user's token.\\r\\n     * Should set `withdrawnTokens` mapping to `true` for the tokenId being withdrawn\\r\\n     * This transaction will be verified when exiting on root chain\\r\\n     *\\r\\n     * @param tokenId tokenId to withdraw\\r\\n     */\\r\\n    function withdrawWithMetadata(uint256 tokenId) external {\\r\\n\\r\\n        require(_msgSender() == ownerOf(tokenId), \\\"BoughtTheTopNFT: invalid token owner\\\");\\r\\n        withdrawnTokens[tokenId] = true;\\r\\n\\r\\n        // Encoding metadata associated with tokenId & emitting event\\r\\n        emit TransferWithMetadata(ownerOf(tokenId), address(0), tokenId, this.encodeTokenMetadata(tokenId));\\r\\n\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This method is supposed to be called by client when withdrawing token with metadata\\r\\n     * and pass return value of this function as second paramter of `withdrawWithMetadata` method\\r\\n     *\\r\\n     * It can be overridden by clients to encode data in a different form, which needs to\\r\\n     * be decoded back by them correctly during exiting\\r\\n     *\\r\\n     */\\r\\n    function encodeTokenMetadata(uint256) external view virtual returns (bytes memory) {\\r\\n        bytes memory empty;\\r\\n        return empty;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x72d11eb01c25c147090439e4d751c44aa7862c7f2d91762868b7608d5d39f50d\",\"license\":\"MIT\"},\"contracts/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x208a653b3c4850786f94a1fa164579a3620a56097b138f02c3eccb393c214e13\",\"license\":\"MIT\"},\"contracts/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\nimport \\\"./IERC721Receiver.sol\\\";\\r\\nimport \\\"./IERC721Metadata.sol\\\";\\r\\nimport \\\"./IERC721Enumerable.sol\\\";\\r\\nimport \\\"../utils/Address.sol\\\";\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\nimport \\\"../utils/Strings.sol\\\";\\r\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping (uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping (address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping (uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return interfaceId == type(IERC721).interfaceId\\r\\n            || interfaceId == type(IERC721Metadata).interfaceId\\r\\n            || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0\\r\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n            : '';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\r\\n     * in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\r\\n        private returns (bool)\\r\\n    {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    // solhint-disable-next-line no-inline-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\r\\n}\\r\\n\",\"keccak256\":\"0xeff50c170597aa69bea1c79e62a203b3770566cf080217dadab6226620b79478\",\"license\":\"MIT\"},\"contracts/ERC721/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"./IERC721Enumerable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\r\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\r\\n * account.\\r\\n */\\r\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\r\\n    // Mapping from owner to list of owned token IDs\\r\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\r\\n\\r\\n    // Mapping from token ID to index of the owner tokens list\\r\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\r\\n\\r\\n    // Array with all token ids, used for enumeration\\r\\n    uint256[] private _allTokens;\\r\\n\\r\\n    // Mapping from token id to position in the allTokens array\\r\\n    mapping(uint256 => uint256) private _allTokensIndex;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\r\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\r\\n            || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n        return _ownedTokens[owner][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _allTokens.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return _allTokens[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            _addTokenToAllTokensEnumeration(tokenId);\\r\\n        } else if (from != to) {\\r\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\r\\n        }\\r\\n        if (to == address(0)) {\\r\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\r\\n        } else if (to != from) {\\r\\n            _addTokenToOwnerEnumeration(to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\r\\n     * @param to address representing the new owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\r\\n     */\\r\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\r\\n        uint256 length = ERC721.balanceOf(to);\\r\\n        _ownedTokens[to][length] = tokenId;\\r\\n        _ownedTokensIndex[tokenId] = length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\r\\n     */\\r\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\r\\n        _allTokensIndex[tokenId] = _allTokens.length;\\r\\n        _allTokens.push(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\r\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\r\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\r\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\r\\n     */\\r\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\r\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\r\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary\\r\\n        if (tokenIndex != lastTokenIndex) {\\r\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n        }\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _ownedTokensIndex[tokenId];\\r\\n        delete _ownedTokens[from][lastTokenIndex];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\r\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\r\\n     */\\r\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\r\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\r\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\r\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\r\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\r\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\r\\n\\r\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _allTokensIndex[tokenId];\\r\\n        _allTokens.pop();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2c919608fcfa1c19127b9bcf8b768315f64eae331ccba49886b191bf1c94e251\",\"license\":\"MIT\"},\"contracts/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n      *\\r\\n      * Requirements:\\r\\n      *\\r\\n      * - `from` cannot be the zero address.\\r\\n      * - `to` cannot be the zero address.\\r\\n      * - `tokenId` token must exist and be owned by `from`.\\r\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n      *\\r\\n      * Emits a {Transfer} event.\\r\\n      */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe3c2034a69e04cdcc9cb874408639ea5557d7e61ce6b5bf1d01691111e88e9f6\",\"license\":\"MIT\"},\"contracts/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n     * Use along with {totalSupply} to enumerate all tokens.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x980894f9c8cdf91558be5731e501c6d3663f1c6a103d9e8f0d513eee049ec208\",\"license\":\"MIT\"},\"contracts/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xbe3d147e384622e27c673c8283435ad1efcf63faf3603968d8e4461839adfe6e\",\"license\":\"MIT\"},\"contracts/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xfba81987894dbeac860ff492218a59dcf4e65183d00553339527408fc5f0a377\",\"license\":\"MIT\"},\"contracts/IOnBurn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOnBurn {\\r\\n    function onBurn(uint256 tokenId) external;\\r\\n}\",\"keccak256\":\"0xbe25a2636b93605a779d0cba807184e203d17a01085f96a0716e769c81844551\",\"license\":\"MIT\"},\"contracts/IOnMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOnMint {\\r\\n    function onMint(address minter, address to, uint256 tokenId, uint256 extra) external;\\r\\n}\",\"keccak256\":\"0x0387291961e0e6f0f312ce78548062da5c2a054b414cba3aab5e2fe696cea305\",\"license\":\"MIT\"},\"contracts/IOnTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOnTransfer {\\r\\n    function onTransfer(address from, address to, uint256 tokenId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6ce01abc2bf4b27c4f1e0cad407d76107096e2e6a0482e5386055b7f2fd90f25\",\"license\":\"MIT\"},\"contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControl {\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n    function grantRole(bytes32 role, address account) external;\\r\\n    function revokeRole(bytes32 role, address account) external;\\r\\n    function renounceRole(bytes32 role, address account) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\r\\n    struct RoleData {\\r\\n        mapping (address => bool) members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping (bytes32 => RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IAccessControl).interfaceId\\r\\n            || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\r\\n        return _roles[role].members[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual override {\\r\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\r\\n\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual override {\\r\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual override {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n    }\\r\\n\\r\\n    function _grantRole(bytes32 role, address account) private {\\r\\n        if (!hasRole(role, account)) {\\r\\n            _roles[role].members[account] = true;\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revokeRole(bytes32 role, address account) private {\\r\\n        if (hasRole(role, account)) {\\r\\n            _roles[role].members[account] = false;\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5280fcd7ad723a1e6fd67b02f1c76764b49f97994323464d5eabf7dc5428ae6b\",\"license\":\"MIT\"},\"contracts/child/IChildToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IChildToken {\\r\\n    function deposit(address user, bytes calldata depositData) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3d6dab4ad7cae3b6a38820911625b2df3efd69b782a15c9f2bde133bc0ac3bc8\",\"license\":\"MIT\"},\"contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x56c55493b8912cb4729acd8a226a37dfb815c104cb57536a899bdaa708b45e1c\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd66de64ebb51d57721ac10bb1571dc8b2798cd48723b8222341bc0e65372e050\",\"license\":\"MIT\"},\"contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp >>= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = alphabet[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x48c16c461709fc32694db45f731ce8c2280df38696ce040839e526218fb92bd5\",\"license\":\"MIT\"},\"contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n */\\r\\nlibrary ECDSA {\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature`. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n     */\\r\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        // Check the signature length\\r\\n        if (signature.length != 65) {\\r\\n            revert(\\\"ECDSA: invalid signature length\\\");\\r\\n        }\\r\\n\\r\\n        // Divide the signature in r, s and v variables\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n\\r\\n        // ecrecover takes the signature parameters, and the only way to get them\\r\\n        // currently is to use assembly.\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            r := mload(add(signature, 0x20))\\r\\n            s := mload(add(signature, 0x40))\\r\\n            v := byte(0, mload(add(signature, 0x60)))\\r\\n        }\\r\\n\\r\\n        return recover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\r\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\r\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n        //\\r\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n        // these malleable signatures as well.\\r\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\r\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\r\\n\\r\\n        return signer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\r\\n     * produces hash corresponding to the one signed with the\\r\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\r\\n     * JSON-RPC method as part of EIP-191.\\r\\n     *\\r\\n     * See {recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\r\\n        // 32 is the length in bytes of hash,\\r\\n        // enforced by the type signature above\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\r\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\r\\n     * to the one signed with the\\r\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\r\\n     * JSON-RPC method as part of EIP-712.\\r\\n     *\\r\\n     * See {recover}.\\r\\n     */\\r\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4b96b0b5e14320f1ded908b1f1df9d1cc86c5379b14d8ff9fcf4507459d7acd4\",\"license\":\"MIT\"},\"contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\r\\n *\\r\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\r\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\r\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\r\\n *\\r\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\r\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\r\\n * ({_hashTypedDataV4}).\\r\\n *\\r\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\r\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\r\\n *\\r\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\r\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\nabstract contract EIP712 {\\r\\n    /* solhint-disable var-name-mixedcase */\\r\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\r\\n    // invalidate the cached domain separator if the chain id changes.\\r\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\r\\n    uint256 private immutable _CACHED_CHAIN_ID;\\r\\n\\r\\n    bytes32 private immutable _HASHED_NAME;\\r\\n    bytes32 private immutable _HASHED_VERSION;\\r\\n    bytes32 private immutable _TYPE_HASH;\\r\\n    /* solhint-enable var-name-mixedcase */\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the domain separator and parameter caches.\\r\\n     *\\r\\n     * The meaning of `name` and `version` is specified in\\r\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\r\\n     *\\r\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\r\\n     * - `version`: the current major version of the signing domain.\\r\\n     *\\r\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\r\\n     * contract upgrade].\\r\\n     */\\r\\n    constructor(string memory name, string memory version) {\\r\\n        bytes32 hashedName = keccak256(bytes(name));\\r\\n        bytes32 hashedVersion = keccak256(bytes(version));\\r\\n        bytes32 typeHash = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\r\\n        _HASHED_NAME = hashedName;\\r\\n        _HASHED_VERSION = hashedVersion;\\r\\n        _CACHED_CHAIN_ID = block.chainid;\\r\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\r\\n        _TYPE_HASH = typeHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator for the current chain.\\r\\n     */\\r\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\r\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\r\\n            return _CACHED_DOMAIN_SEPARATOR;\\r\\n        } else {\\r\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\r\\n        return keccak256(\\r\\n            abi.encode(\\r\\n                typeHash,\\r\\n                name,\\r\\n                version,\\r\\n                block.chainid,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\r\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\r\\n     *\\r\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\r\\n     *\\r\\n     * ```solidity\\r\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\r\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\r\\n     *     mailTo,\\r\\n     *     keccak256(bytes(mailContents))\\r\\n     * )));\\r\\n     * address signer = ECDSA.recover(digest, signature);\\r\\n     * ```\\r\\n     */\\r\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\r\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x93f4e62a89435a7804f3ad7826ae81876dc515afb6dc91f057ab602813d7060e\",\"license\":\"MIT\"},\"contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x071cfd008ed1810ddf23f56bd1ce2f0c3983bc291559067e94618547f579e1f2\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x7e30ce048ac2ce3cc97d725487ed5a82192bb939456f46e0cbe38f1b48644f9e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405180604001604052806011815260200170109bdd59da1d151a194b9d1bdc08139195607a1b815250604051806040016040528060018152602001603160f81b81525060405180604001604052806011815260200170109bdd59da1d151a194b9d1bdc08139195607a1b8152506040518060400160405280600381526020016210951560ea1b8152508160019080519060200190620000b592919062000258565b508051620000cb90600290602084019062000258565b5050825160208085019190912083519184019190912060c082905260e08190524660a0529091507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6200012081848462000155565b6080526101005250620001449250600091506200013e905062000191565b62000195565b662386f26fc10000600c5562000367565b6000838383463060405160200162000172959493929190620002fe565b6040516020818303038152906040528051906020012090509392505050565b3390565b620001a18282620001a5565b5050565b620001b182826200022f565b620001a1576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001eb62000191565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b82805462000266906200032a565b90600052602060002090601f0160209004810192826200028a5760008555620002d5565b82601f10620002a557805160ff1916838001178555620002d5565b82800160010185558215620002d5579182015b82811115620002d5578251825591602001919060010190620002b8565b50620002e3929150620002e7565b5090565b5b80821115620002e35760008155600101620002e8565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6002810460018216806200033f57607f821691505b602082108114156200036157634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051613f72620003ac600039600061267a015260006126bc0152600061269b01526000612628015260006126510152613f726000f3fe6080604052600436106103135760003560e01c806370a082311161019a578063b28a2341116100e1578063d547741f1161008a578063e985e9c511610064578063e985e9c514610843578063eddd0d9c14610863578063f76fc35e1461088357610313565b8063d547741f146107f9578063d547cfb714610819578063e02023a11461082e57610313565b8063cf2c52cb116100bb578063cf2c52cb146107a4578063d32239ed146107c4578063d5391393146107e457610313565b8063b28a23411461074f578063b88d4fde14610764578063c87b56dd1461078457610313565b806395d89b4111610143578063a22cb4651161011d578063a22cb465146106fa578063a3b0b5a31461071a578063a5e584dc1461072f57610313565b806395d89b41146106b05780639c8d4156146106c5578063a217fddf146106e557610313565b80638bbd3601116101745780638bbd36011461066657806391d148541461067b5780639559c0bd1461069b57610313565b806370a08231146106135780637fb9a06314610633578063839006f21461064657610313565b80632cdbfcd51161025e57806342842e0e116102075780634f6ccce7116101e15780634f6ccce7146105be5780635472ebc6146105de5780636352211e146105f357610313565b806342842e0e1461056957806342966c6814610589578063476343ee146105a957610313565b80632f745c59116102385780632f745c591461050957806330176e131461052957806336568abe1461054957610313565b80632cdbfcd5146104a95780632e1a7d4d146104c95780632f2ff15d146104e957610313565b8063106fba10116102c057806318160ddd1161029a57806318160ddd1461045457806323b872dd14610469578063248a9ca31461048957610313565b8063106fba10146103ff57806313966db5146104125780631653c39a1461043457610313565b8063081812fc116102f1578063081812fc14610390578063095ea7b3146103bd578063105a6b09146103df57610313565b806301ffc9a71461031857806306fdde031461034e57806307a974fc14610370575b600080fd5b34801561032457600080fd5b50610338610333366004612ed0565b610898565b6040516103459190613201565b60405180910390f35b34801561035a57600080fd5b506103636108ab565b6040516103459190613283565b34801561037c57600080fd5b5061033861038b366004612e96565b61093e565b34801561039c57600080fd5b506103b06103ab366004612e96565b610953565b60405161034591906130f8565b3480156103c957600080fd5b506103dd6103d8366004612ce4565b61099f565b005b3480156103eb57600080fd5b506103dd6103fa366004612b33565b610a37565b6103dd61040d366004612d0d565b610ace565b34801561041e57600080fd5b50610427610ae4565b604051610345919061320c565b34801561044057600080fd5b5061036361044f366004612e96565b610aea565b34801561046057600080fd5b50610427610af0565b34801561047557600080fd5b506103dd610484366004612b7f565b610af6565b34801561049557600080fd5b506104276104a4366004612e96565b610b2e565b3480156104b557600080fd5b506103dd6104c4366004612b33565b610b43565b3480156104d557600080fd5b506103dd6104e4366004612e96565b610bcf565b3480156104f557600080fd5b506103dd610504366004612eae565b610c34565b34801561051557600080fd5b50610427610524366004612ce4565b610c72565b34801561053557600080fd5b506103dd610544366004612f72565b610cc4565b34801561055557600080fd5b506103dd610564366004612eae565b610d37565b34801561057557600080fd5b506103dd610584366004612b7f565b610d79565b34801561059557600080fd5b506103dd6105a4366004612e96565b610d94565b3480156105b557600080fd5b506103dd610e51565b3480156105ca57600080fd5b506104276105d9366004612e96565b610f0a565b3480156105ea57600080fd5b506103b0610f65565b3480156105ff57600080fd5b506103b061060e366004612e96565b610f74565b34801561061f57600080fd5b5061042761062e366004612b33565b610fa9565b6103dd610641366004612fca565b610fed565b34801561065257600080fd5b506103dd610661366004612b33565b611009565b34801561067257600080fd5b506103b061116d565b34801561068757600080fd5b50610338610696366004612eae565b61117c565b3480156106a757600080fd5b506104276111a5565b3480156106bc57600080fd5b506103636111aa565b3480156106d157600080fd5b506103dd6106e0366004612d64565b6111b9565b3480156106f157600080fd5b506104276112f9565b34801561070657600080fd5b506103dd610715366004612c5d565b6112fe565b34801561072657600080fd5b506104276113cc565b34801561073b57600080fd5b506103dd61074a366004612e96565b6113f0565b34801561075b57600080fd5b506103b061151c565b34801561077057600080fd5b506103dd61077f366004612bba565b61152b565b34801561079057600080fd5b5061036361079f366004612e96565b61156a565b3480156107b057600080fd5b506103dd6107bf366004612c93565b6115ed565b3480156107d057600080fd5b506103dd6107df366004612b33565b611728565b3480156107f057600080fd5b506104276117b4565b34801561080557600080fd5b506103dd610814366004612eae565b6117d8565b34801561082557600080fd5b50610363611800565b34801561083a57600080fd5b5061042761188e565b34801561084f57600080fd5b5061033861085e366004612b4d565b6118b2565b34801561086f57600080fd5b506103dd61087e366004612e96565b6118e0565b34801561088f57600080fd5b5061042761193e565b60006108a382611962565b90505b919050565b6060600180546108ba90613e36565b80601f01602080910402602001604051908101604052809291908181526020018280546108e690613e36565b80156109335780601f1061090857610100808354040283529160200191610933565b820191906000526020600020905b81548152906001019060200180831161091657829003601f168201915b505050505090505b90565b60106020526000908152604090205460ff1681565b600061095e826119b8565b6109835760405162461bcd60e51b815260040161097a9061396f565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006109aa82610f74565b9050806001600160a01b0316836001600160a01b031614156109de5760405162461bcd60e51b815260040161097a90613a86565b806001600160a01b03166109f06119d5565b6001600160a01b03161480610a0c5750610a0c8161085e6119d5565b610a285760405162461bcd60e51b815260040161097a9061370c565b610a3283836119d9565b505050565b610a4460006106966119d5565b610a605760405162461bcd60e51b815260040161097a90613b40565b600e80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517fea5be56a0975e1b7d5383c503a12b55a9d2cf6c7700cdc1444c817254bbaa98590610ac39083906130f8565b60405180910390a150565b610adc868686868686611a5f565b505050505050565b600c5481565b50606090565b60095490565b610b07610b016119d5565b82611c21565b610b235760405162461bcd60e51b815260040161097a90613b9d565b610a32838383611ca6565b60009081526020819052604090206001015490565b610b5060006106966119d5565b610b6c5760405162461bcd60e51b815260040161097a90613b40565b600f80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517f0d14d5944ad83cbd3a426441f12bdd92bf2b8a51172a2a6b2be9f76baa2e410c90610ac39083906130f8565b610bd881610f74565b6001600160a01b0316610be96119d5565b6001600160a01b031614610c0f5760405162461bcd60e51b815260040161097a906132fc565b6000818152601060205260409020805460ff19166001179055610c3181611deb565b50565b610c48610c4083610b2e565b6106966119d5565b610c645760405162461bcd60e51b815260040161097a90613359565b610c6e8282611eaa565b5050565b6000610c7d83610fa9565b8210610c9b5760405162461bcd60e51b815260040161097a90613413565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610cd160006106966119d5565b610ced5760405162461bcd60e51b815260040161097a90613b40565b610cf9600b8383612a2b565b507f228a3ac0675af69daeaaa5b8d369fe2faae665e7f340f0b78ccbb84e17b4f6948282604051610d2b929190613296565b60405180910390a15050565b610d3f6119d5565b6001600160a01b0316816001600160a01b031614610d6f5760405162461bcd60e51b815260040161097a90613d11565b610c6e8282611f2f565b610a328383836040518060200160405280600081525061152b565b610d9f610b016119d5565b610dbb5760405162461bcd60e51b815260040161097a90613c57565b600e546001600160a01b031615610e4857600e546040517f0513fc8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690630513fc8b90610e1590849060040161320c565b600060405180830381600087803b158015610e2f57600080fd5b505af1158015610e43573d6000803e3d6000fd5b505050505b610c3181611deb565b610e7d7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec6106966119d5565b610e995760405162461bcd60e51b815260040161097a90613912565b47610ea26119d5565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610eda573d6000803e3d6000fd5b507f9800e6f57aeb4360eaa72295a820a4293e1e66fbfcabcd8874ae141304a76deb81604051610ac3919061320c565b6000610f14610af0565b8210610f325760405162461bcd60e51b815260040161097a90613bfa565b60098281548110610f5357634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600f546001600160a01b031681565b6000818152600360205260408120546001600160a01b0316806108a35760405162461bcd60e51b815260040161097a90613823565b60006001600160a01b038216610fd15760405162461bcd60e51b815260040161097a90613769565b506001600160a01b031660009081526004602052604090205490565b611002610ff86119d5565b8686868686611a5f565b5050505050565b6110357f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec6106966119d5565b6110515760405162461bcd60e51b815260040161097a90613912565b806001600160a01b03811663a9059cbb6110696119d5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038516906370a08231906110ae9030906004016130f8565b60206040518083038186803b1580156110c657600080fd5b505afa1580156110da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fe9190612fb2565b6040518363ffffffff1660e01b815260040161111b929190613195565b602060405180830381600087803b15801561113557600080fd5b505af1158015611149573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a329190612e7a565b600e546001600160a01b031681565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b601481565b6060600280546108ba90613e36565b8060148111156111db5760405162461bcd60e51b815260040161097a90613cb4565b60005b818110156112a957600084848381811061120857634e487b7160e01b600052603260045260246000fd5b90506020020135905061121a81610f74565b6001600160a01b031661122b6119d5565b6001600160a01b03161481604051602001611246919061306b565b604051602081830303815290604052906112735760405162461bcd60e51b815260040161097a9190613283565b506000818152601060205260409020805460ff1916600117905561129681611deb565b50806112a181613e71565b9150506111de565b506112b26119d5565b6001600160a01b03167ff871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df84846040516112ec9291906131ae565b60405180910390a2505050565b600081565b6113066119d5565b6001600160a01b0316826001600160a01b031614156113375760405162461bcd60e51b815260040161097a90613561565b80600660006113446119d5565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556113886119d5565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113c09190613201565b60405180910390a35050565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b6113f981610f74565b6001600160a01b031661140a6119d5565b6001600160a01b0316146114305760405162461bcd60e51b815260040161097a906132fc565b6000818152601060205260408120805460ff19166001179055819061145482610f74565b6001600160a01b03167ff94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14306001600160a01b0316631653c39a866040518263ffffffff1660e01b81526004016114aa919061320c565b60006040518083038186803b1580156114c257600080fd5b505afa1580156114d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114fe9190810190612f08565b60405161150b9190613283565b60405180910390a4610c3181611deb565b600d546001600160a01b031681565b61153c6115366119d5565b83611c21565b6115585760405162461bcd60e51b815260040161097a90613b9d565b61156484848484611fb2565b50505050565b6060611575826119b8565b6115915760405162461bcd60e51b815260040161097a90613a29565b600061159b611fe5565b905060008151116115bb57604051806020016040528060008152506115e6565b806115c584611ff4565b6040516020016115d692919061303c565b6040516020818303038152906040525b9392505050565b6116197f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a96106966119d5565b6116355760405162461bcd60e51b815260040161097a90613652565b602081141561167457600061164c82840184612e96565b6000818152601060205260409020805460ff19169055905061166e8482612143565b50610a32565b600061168282840184612dd3565b805190915060005b81811015610adc576000601060008584815181106116b857634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055506117168684838151811061170957634e487b7160e01b600052603260045260246000fd5b6020026020010151612143565b8061172081613e71565b91505061168a565b61173560006106966119d5565b6117515760405162461bcd60e51b815260040161097a90613b40565b600d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517fffdf1265f75c65042a9ce1492cc564231dfb38876d9f29949e9ff441d00edcb590610ac39083906130f8565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6117e4610c4083610b2e565b610d6f5760405162461bcd60e51b815260040161097a906136af565b600b805461180d90613e36565b80601f016020809104026020016040519081016040528092919081815260200182805461183990613e36565b80156118865780601f1061185b57610100808354040283529160200191611886565b820191906000526020600020905b81548152906001019060200180831161186957829003601f168201915b505050505081565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec81565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6118ed60006106966119d5565b6119095760405162461bcd60e51b815260040161097a90613b40565b600c8190556040517fe427e272b122e738fd867ac5defcedb2bc9362341166a49d793d8b230f75670c90610ac390839061320c565b7fc58b61fec2cd4de12178326c644460af93b446ff95aa30d194dd77fc93f321ff81565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806108a357506108a38261223a565b6000908152600360205260409020546001600160a01b0316151590565b3390565b600081815260056020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190611a2682610f74565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008581526010602052604090205460ff1615611a8e5760405162461bcd60e51b815260040161097a906137c6565b6000611ae57fc58b61fec2cd4de12178326c644460af93b446ff95aa30d194dd77fc93f321ff888888604051602001611aca9493929190613215565b604051602081830303815290604052805190602001206122dc565b90506000611af5828686866122ef565b9050611b217f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68261117c565b611b3d5760405162461bcd60e51b815260040161097a90613ae3565b611b697f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66106966119d5565b611b8e57600c543414611b8e5760405162461bcd60e51b815260040161097a906133b6565b600d546001600160a01b031615611c0d57600d546001600160a01b0316633f812ccc611bb86119d5565b8a8a8a6040518563ffffffff1660e01b8152600401611bda949392919061316c565b600060405180830381600087803b158015611bf457600080fd5b505af1158015611c08573d6000803e3d6000fd5b505050505b611c178888612143565b5050505050505050565b6000611c2c826119b8565b611c485760405162461bcd60e51b815260040161097a906135f5565b6000611c5383610f74565b9050806001600160a01b0316846001600160a01b03161480611c8e5750836001600160a01b0316611c8384610953565b6001600160a01b0316145b80611c9e5750611c9e81856118b2565b949350505050565b826001600160a01b0316611cb982610f74565b6001600160a01b031614611cdf5760405162461bcd60e51b815260040161097a906139cc565b6001600160a01b038216611d055760405162461bcd60e51b815260040161097a90613504565b611d108383836123e5565b611d1b6000826119d9565b6001600160a01b0383166000908152600460205260408120805460019290611d44908490613df3565b90915550506001600160a01b0382166000908152600460205260408120805460019290611d72908490613dc7565b909155505060008181526003602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611df682610f74565b9050611e04816000846123e5565b611e0f6000836119d9565b6001600160a01b0381166000908152600460205260408120805460019290611e38908490613df3565b909155505060008281526003602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b611eb4828261117c565b610c6e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611eeb6119d5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f39828261117c565b15610c6e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055611f6e6119d5565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b611fbd848484611ca6565b611fc984848484612485565b6115645760405162461bcd60e51b815260040161097a90613470565b6060600b80546108ba90613e36565b606081612035575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526108a6565b8160005b811561205f578061204981613e71565b91506120589050600a83613ddf565b9150612039565b60008167ffffffffffffffff81111561208857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120b2576020820181803683370190505b5090505b8415611c9e576120c7600183613df3565b91506120d4600a86613eaa565b6120df906030613dc7565b60f81b81838151811061210257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061213c600a86613ddf565b94506120b6565b6001600160a01b0382166121695760405162461bcd60e51b815260040161097a906138dd565b612172816119b8565b1561218f5760405162461bcd60e51b815260040161097a906134cd565b61219b600083836123e5565b6001600160a01b03821660009081526004602052604081208054600192906121c4908490613dc7565b909155505060008181526003602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806122cd57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108a357506108a3826125ce565b60006108a36122e9612624565b836126e7565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156123315760405162461bcd60e51b815260040161097a90613598565b8360ff16601b148061234657508360ff16601c145b6123625760405162461bcd60e51b815260040161097a90613880565b6000600186868686604051600081526020016040526040516123879493929190613265565b6020604051602081039080840390855afa1580156123a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166123dc5760405162461bcd60e51b815260040161097a906132c5565b95945050505050565b6123f083838361271a565b600f546001600160a01b031615610a3257600f546040517f4a3931490000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634a3931499061244e9086908690869060040161310c565b600060405180830381600087803b15801561246857600080fd5b505af115801561247c573d6000803e3d6000fd5b50505050505050565b6000612499846001600160a01b03166127a3565b156125c657836001600160a01b031663150b7a026124b56119d5565b8786866040518563ffffffff1660e01b81526004016124d79493929190613130565b602060405180830381600087803b1580156124f157600080fd5b505af1925050508015612521575060408051601f3d908101601f1916820190925261251e91810190612eec565b60015b61257b573d80801561254f576040519150601f19603f3d011682016040523d82523d6000602084013e612554565b606091505b5080516125735760405162461bcd60e51b815260040161097a90613470565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611c9e565b506001611c9e565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806108a357506108a3826127a9565b60007f000000000000000000000000000000000000000000000000000000000000000046141561267557507f000000000000000000000000000000000000000000000000000000000000000061093b565b6126e07f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006127f3565b905061093b565b600082826040516020016126fc9291906130c2565b60405160208183030381529060405280519060200120905092915050565b612725838383610a32565b6001600160a01b0383166127415761273c8161282d565b612764565b816001600160a01b0316836001600160a01b031614612764576127648382612871565b6001600160a01b0382166127805761277b8161290e565b610a32565b826001600160a01b0316826001600160a01b031614610a3257610a3282826129e7565b3b151590565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6000838383463060405160200161280e959493929190613239565b6040516020818303038152906040528051906020012090509392505050565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b6000600161287e84610fa9565b6128889190613df3565b6000838152600860205260409020549091508082146128db576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b60095460009061292090600190613df3565b6000838152600a60205260408120546009805493945090928490811061295657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806009838154811061298557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600a909152604080822084905585825281205560098054806129cb57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006129f283610fa9565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b828054612a3790613e36565b90600052602060002090601f016020900481019282612a595760008555612a9f565b82601f10612a725782800160ff19823516178555612a9f565b82800160010185558215612a9f579182015b82811115612a9f578235825591602001919060010190612a84565b50612aab929150612aaf565b5090565b5b80821115612aab5760008155600101612ab0565b80356001600160a01b03811681146108a657600080fd5b60008083601f840112612aec578182fd5b50813567ffffffffffffffff811115612b03578182fd5b602083019150836020828501011115612b1b57600080fd5b9250929050565b803560ff811681146108a657600080fd5b600060208284031215612b44578081fd5b6115e682612ac4565b60008060408385031215612b5f578081fd5b612b6883612ac4565b9150612b7660208401612ac4565b90509250929050565b600080600060608486031215612b93578081fd5b612b9c84612ac4565b9250612baa60208501612ac4565b9150604084013590509250925092565b60008060008060808587031215612bcf578081fd5b612bd885612ac4565b9350612be660208601612ac4565b925060408501359150606085013567ffffffffffffffff811115612c08578182fd5b8501601f81018713612c18578182fd5b8035612c2b612c2682613d9f565b613d6e565b818152886020838501011115612c3f578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215612c6f578182fd5b612c7883612ac4565b91506020830135612c8881613f00565b809150509250929050565b600080600060408486031215612ca7578283fd5b612cb084612ac4565b9250602084013567ffffffffffffffff811115612ccb578283fd5b612cd786828701612adb565b9497909650939450505050565b60008060408385031215612cf6578182fd5b612cff83612ac4565b946020939093013593505050565b60008060008060008060c08789031215612d25578384fd5b612d2e87612ac4565b95506020870135945060408701359350612d4a60608801612b22565b92506080870135915060a087013590509295509295509295565b60008060208385031215612d76578182fd5b823567ffffffffffffffff80821115612d8d578384fd5b818501915085601f830112612da0578384fd5b813581811115612dae578485fd5b8660208083028501011115612dc1578485fd5b60209290920196919550909350505050565b60006020808385031215612de5578182fd5b823567ffffffffffffffff80821115612dfc578384fd5b818501915085601f830112612e0f578384fd5b813581811115612e2157612e21613eea565b8381029150612e31848301613d6e565b8181528481019084860184860187018a1015612e4b578788fd5b8795505b83861015612e6d578035835260019590950194918601918601612e4f565b5098975050505050505050565b600060208284031215612e8b578081fd5b81516115e681613f00565b600060208284031215612ea7578081fd5b5035919050565b60008060408385031215612ec0578182fd5b82359150612b7660208401612ac4565b600060208284031215612ee1578081fd5b81356115e681613f0e565b600060208284031215612efd578081fd5b81516115e681613f0e565b600060208284031215612f19578081fd5b815167ffffffffffffffff811115612f2f578182fd5b8201601f81018413612f3f578182fd5b8051612f4d612c2682613d9f565b818152856020838501011115612f61578384fd5b6123dc826020830160208601613e0a565b60008060208385031215612f84578182fd5b823567ffffffffffffffff811115612f9a578283fd5b612fa685828601612adb565b90969095509350505050565b600060208284031215612fc3578081fd5b5051919050565b600080600080600060a08688031215612fe1578283fd5b8535945060208601359350612ff860408701612b22565b94979396509394606081013594506080013592915050565b60008151808452613028816020860160208601613e0a565b601f01601f19169290920160200192915050565b6000835161304e818460208801613e0a565b835190830190613062818360208801613e0a565b01949350505050565b7f426f75676874546865546f704e46543a20696e76616c696420746f6b656e206f81527f776e6572200000000000000000000000000000000000000000000000000000006020820152602581019190915260450190565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526131626080830184613010565b9695505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6000602082528260208301527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156131e6578081fd5b60208302808560408501379190910160400190815292915050565b901515815260200190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082526115e66020830184613010565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526024908201527f426f75676874546865546f704e46543a20696e76616c696420746f6b656e206f60408201527f776e657200000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b6020808252602c908201527f426f75676874546865546f704e46543a20696e636f7272656374206d696e742060408201527f6665652070726f76696465640000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201527f74206f6620626f756e6473000000000000000000000000000000000000000000606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f426f75676874546865546f704e46543a206d7573742068617665206465706f7360408201527f69746f7220726f6c650000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f426f75676874546865546f704e46543a20746f6b656e20657869737473206f6e60408201527f20726f6f7420636861696e000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526028908201527f426f75676874546865546f704e46543a206d757374206861766520776974686460408201527f72617720726f6c65000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201527f73206e6f74206f776e0000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560408201527f7200000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f426f75676874546865546f704e46543a206d7573742068617665206d696e746560408201527f7220726f6c650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f426f75676874546865546f704e46543a206d75737420686176652061646d696e60408201527f20726f6c65000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201527f7574206f6620626f756e64730000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000606082015260800190565b60208082526024908201527f426f75676874546865546f704e46543a2065786365656473206261746368206c60408201527f696d697400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d9757613d97613eea565b604052919050565b600067ffffffffffffffff821115613db957613db9613eea565b50601f01601f191660200190565b60008219821115613dda57613dda613ebe565b500190565b600082613dee57613dee613ed4565b500490565b600082821015613e0557613e05613ebe565b500390565b60005b83811015613e25578181015183820152602001613e0d565b838111156115645750506000910152565b600281046001821680613e4a57607f821691505b60208210811415613e6b57634e487b7160e01b600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ea357613ea3613ebe565b5060010190565b600082613eb957613eb9613ed4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610c3157600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610c3157600080fdfea2646970667358221220d142b956911d2dda0eebed3adc339f48e105cb59fc4c92d2828f367a4ef624bc64736f6c63430008010033",
  "deployedBytecode": "0x6080604052600436106103135760003560e01c806370a082311161019a578063b28a2341116100e1578063d547741f1161008a578063e985e9c511610064578063e985e9c514610843578063eddd0d9c14610863578063f76fc35e1461088357610313565b8063d547741f146107f9578063d547cfb714610819578063e02023a11461082e57610313565b8063cf2c52cb116100bb578063cf2c52cb146107a4578063d32239ed146107c4578063d5391393146107e457610313565b8063b28a23411461074f578063b88d4fde14610764578063c87b56dd1461078457610313565b806395d89b4111610143578063a22cb4651161011d578063a22cb465146106fa578063a3b0b5a31461071a578063a5e584dc1461072f57610313565b806395d89b41146106b05780639c8d4156146106c5578063a217fddf146106e557610313565b80638bbd3601116101745780638bbd36011461066657806391d148541461067b5780639559c0bd1461069b57610313565b806370a08231146106135780637fb9a06314610633578063839006f21461064657610313565b80632cdbfcd51161025e57806342842e0e116102075780634f6ccce7116101e15780634f6ccce7146105be5780635472ebc6146105de5780636352211e146105f357610313565b806342842e0e1461056957806342966c6814610589578063476343ee146105a957610313565b80632f745c59116102385780632f745c591461050957806330176e131461052957806336568abe1461054957610313565b80632cdbfcd5146104a95780632e1a7d4d146104c95780632f2ff15d146104e957610313565b8063106fba10116102c057806318160ddd1161029a57806318160ddd1461045457806323b872dd14610469578063248a9ca31461048957610313565b8063106fba10146103ff57806313966db5146104125780631653c39a1461043457610313565b8063081812fc116102f1578063081812fc14610390578063095ea7b3146103bd578063105a6b09146103df57610313565b806301ffc9a71461031857806306fdde031461034e57806307a974fc14610370575b600080fd5b34801561032457600080fd5b50610338610333366004612ed0565b610898565b6040516103459190613201565b60405180910390f35b34801561035a57600080fd5b506103636108ab565b6040516103459190613283565b34801561037c57600080fd5b5061033861038b366004612e96565b61093e565b34801561039c57600080fd5b506103b06103ab366004612e96565b610953565b60405161034591906130f8565b3480156103c957600080fd5b506103dd6103d8366004612ce4565b61099f565b005b3480156103eb57600080fd5b506103dd6103fa366004612b33565b610a37565b6103dd61040d366004612d0d565b610ace565b34801561041e57600080fd5b50610427610ae4565b604051610345919061320c565b34801561044057600080fd5b5061036361044f366004612e96565b610aea565b34801561046057600080fd5b50610427610af0565b34801561047557600080fd5b506103dd610484366004612b7f565b610af6565b34801561049557600080fd5b506104276104a4366004612e96565b610b2e565b3480156104b557600080fd5b506103dd6104c4366004612b33565b610b43565b3480156104d557600080fd5b506103dd6104e4366004612e96565b610bcf565b3480156104f557600080fd5b506103dd610504366004612eae565b610c34565b34801561051557600080fd5b50610427610524366004612ce4565b610c72565b34801561053557600080fd5b506103dd610544366004612f72565b610cc4565b34801561055557600080fd5b506103dd610564366004612eae565b610d37565b34801561057557600080fd5b506103dd610584366004612b7f565b610d79565b34801561059557600080fd5b506103dd6105a4366004612e96565b610d94565b3480156105b557600080fd5b506103dd610e51565b3480156105ca57600080fd5b506104276105d9366004612e96565b610f0a565b3480156105ea57600080fd5b506103b0610f65565b3480156105ff57600080fd5b506103b061060e366004612e96565b610f74565b34801561061f57600080fd5b5061042761062e366004612b33565b610fa9565b6103dd610641366004612fca565b610fed565b34801561065257600080fd5b506103dd610661366004612b33565b611009565b34801561067257600080fd5b506103b061116d565b34801561068757600080fd5b50610338610696366004612eae565b61117c565b3480156106a757600080fd5b506104276111a5565b3480156106bc57600080fd5b506103636111aa565b3480156106d157600080fd5b506103dd6106e0366004612d64565b6111b9565b3480156106f157600080fd5b506104276112f9565b34801561070657600080fd5b506103dd610715366004612c5d565b6112fe565b34801561072657600080fd5b506104276113cc565b34801561073b57600080fd5b506103dd61074a366004612e96565b6113f0565b34801561075b57600080fd5b506103b061151c565b34801561077057600080fd5b506103dd61077f366004612bba565b61152b565b34801561079057600080fd5b5061036361079f366004612e96565b61156a565b3480156107b057600080fd5b506103dd6107bf366004612c93565b6115ed565b3480156107d057600080fd5b506103dd6107df366004612b33565b611728565b3480156107f057600080fd5b506104276117b4565b34801561080557600080fd5b506103dd610814366004612eae565b6117d8565b34801561082557600080fd5b50610363611800565b34801561083a57600080fd5b5061042761188e565b34801561084f57600080fd5b5061033861085e366004612b4d565b6118b2565b34801561086f57600080fd5b506103dd61087e366004612e96565b6118e0565b34801561088f57600080fd5b5061042761193e565b60006108a382611962565b90505b919050565b6060600180546108ba90613e36565b80601f01602080910402602001604051908101604052809291908181526020018280546108e690613e36565b80156109335780601f1061090857610100808354040283529160200191610933565b820191906000526020600020905b81548152906001019060200180831161091657829003601f168201915b505050505090505b90565b60106020526000908152604090205460ff1681565b600061095e826119b8565b6109835760405162461bcd60e51b815260040161097a9061396f565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006109aa82610f74565b9050806001600160a01b0316836001600160a01b031614156109de5760405162461bcd60e51b815260040161097a90613a86565b806001600160a01b03166109f06119d5565b6001600160a01b03161480610a0c5750610a0c8161085e6119d5565b610a285760405162461bcd60e51b815260040161097a9061370c565b610a3283836119d9565b505050565b610a4460006106966119d5565b610a605760405162461bcd60e51b815260040161097a90613b40565b600e80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517fea5be56a0975e1b7d5383c503a12b55a9d2cf6c7700cdc1444c817254bbaa98590610ac39083906130f8565b60405180910390a150565b610adc868686868686611a5f565b505050505050565b600c5481565b50606090565b60095490565b610b07610b016119d5565b82611c21565b610b235760405162461bcd60e51b815260040161097a90613b9d565b610a32838383611ca6565b60009081526020819052604090206001015490565b610b5060006106966119d5565b610b6c5760405162461bcd60e51b815260040161097a90613b40565b600f80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517f0d14d5944ad83cbd3a426441f12bdd92bf2b8a51172a2a6b2be9f76baa2e410c90610ac39083906130f8565b610bd881610f74565b6001600160a01b0316610be96119d5565b6001600160a01b031614610c0f5760405162461bcd60e51b815260040161097a906132fc565b6000818152601060205260409020805460ff19166001179055610c3181611deb565b50565b610c48610c4083610b2e565b6106966119d5565b610c645760405162461bcd60e51b815260040161097a90613359565b610c6e8282611eaa565b5050565b6000610c7d83610fa9565b8210610c9b5760405162461bcd60e51b815260040161097a90613413565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610cd160006106966119d5565b610ced5760405162461bcd60e51b815260040161097a90613b40565b610cf9600b8383612a2b565b507f228a3ac0675af69daeaaa5b8d369fe2faae665e7f340f0b78ccbb84e17b4f6948282604051610d2b929190613296565b60405180910390a15050565b610d3f6119d5565b6001600160a01b0316816001600160a01b031614610d6f5760405162461bcd60e51b815260040161097a90613d11565b610c6e8282611f2f565b610a328383836040518060200160405280600081525061152b565b610d9f610b016119d5565b610dbb5760405162461bcd60e51b815260040161097a90613c57565b600e546001600160a01b031615610e4857600e546040517f0513fc8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690630513fc8b90610e1590849060040161320c565b600060405180830381600087803b158015610e2f57600080fd5b505af1158015610e43573d6000803e3d6000fd5b505050505b610c3181611deb565b610e7d7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec6106966119d5565b610e995760405162461bcd60e51b815260040161097a90613912565b47610ea26119d5565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610eda573d6000803e3d6000fd5b507f9800e6f57aeb4360eaa72295a820a4293e1e66fbfcabcd8874ae141304a76deb81604051610ac3919061320c565b6000610f14610af0565b8210610f325760405162461bcd60e51b815260040161097a90613bfa565b60098281548110610f5357634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600f546001600160a01b031681565b6000818152600360205260408120546001600160a01b0316806108a35760405162461bcd60e51b815260040161097a90613823565b60006001600160a01b038216610fd15760405162461bcd60e51b815260040161097a90613769565b506001600160a01b031660009081526004602052604090205490565b611002610ff86119d5565b8686868686611a5f565b5050505050565b6110357f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec6106966119d5565b6110515760405162461bcd60e51b815260040161097a90613912565b806001600160a01b03811663a9059cbb6110696119d5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038516906370a08231906110ae9030906004016130f8565b60206040518083038186803b1580156110c657600080fd5b505afa1580156110da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fe9190612fb2565b6040518363ffffffff1660e01b815260040161111b929190613195565b602060405180830381600087803b15801561113557600080fd5b505af1158015611149573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a329190612e7a565b600e546001600160a01b031681565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b601481565b6060600280546108ba90613e36565b8060148111156111db5760405162461bcd60e51b815260040161097a90613cb4565b60005b818110156112a957600084848381811061120857634e487b7160e01b600052603260045260246000fd5b90506020020135905061121a81610f74565b6001600160a01b031661122b6119d5565b6001600160a01b03161481604051602001611246919061306b565b604051602081830303815290604052906112735760405162461bcd60e51b815260040161097a9190613283565b506000818152601060205260409020805460ff1916600117905561129681611deb565b50806112a181613e71565b9150506111de565b506112b26119d5565b6001600160a01b03167ff871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df84846040516112ec9291906131ae565b60405180910390a2505050565b600081565b6113066119d5565b6001600160a01b0316826001600160a01b031614156113375760405162461bcd60e51b815260040161097a90613561565b80600660006113446119d5565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556113886119d5565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113c09190613201565b60405180910390a35050565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b6113f981610f74565b6001600160a01b031661140a6119d5565b6001600160a01b0316146114305760405162461bcd60e51b815260040161097a906132fc565b6000818152601060205260408120805460ff19166001179055819061145482610f74565b6001600160a01b03167ff94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14306001600160a01b0316631653c39a866040518263ffffffff1660e01b81526004016114aa919061320c565b60006040518083038186803b1580156114c257600080fd5b505afa1580156114d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114fe9190810190612f08565b60405161150b9190613283565b60405180910390a4610c3181611deb565b600d546001600160a01b031681565b61153c6115366119d5565b83611c21565b6115585760405162461bcd60e51b815260040161097a90613b9d565b61156484848484611fb2565b50505050565b6060611575826119b8565b6115915760405162461bcd60e51b815260040161097a90613a29565b600061159b611fe5565b905060008151116115bb57604051806020016040528060008152506115e6565b806115c584611ff4565b6040516020016115d692919061303c565b6040516020818303038152906040525b9392505050565b6116197f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a96106966119d5565b6116355760405162461bcd60e51b815260040161097a90613652565b602081141561167457600061164c82840184612e96565b6000818152601060205260409020805460ff19169055905061166e8482612143565b50610a32565b600061168282840184612dd3565b805190915060005b81811015610adc576000601060008584815181106116b857634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055506117168684838151811061170957634e487b7160e01b600052603260045260246000fd5b6020026020010151612143565b8061172081613e71565b91505061168a565b61173560006106966119d5565b6117515760405162461bcd60e51b815260040161097a90613b40565b600d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517fffdf1265f75c65042a9ce1492cc564231dfb38876d9f29949e9ff441d00edcb590610ac39083906130f8565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6117e4610c4083610b2e565b610d6f5760405162461bcd60e51b815260040161097a906136af565b600b805461180d90613e36565b80601f016020809104026020016040519081016040528092919081815260200182805461183990613e36565b80156118865780601f1061185b57610100808354040283529160200191611886565b820191906000526020600020905b81548152906001019060200180831161186957829003601f168201915b505050505081565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec81565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6118ed60006106966119d5565b6119095760405162461bcd60e51b815260040161097a90613b40565b600c8190556040517fe427e272b122e738fd867ac5defcedb2bc9362341166a49d793d8b230f75670c90610ac390839061320c565b7fc58b61fec2cd4de12178326c644460af93b446ff95aa30d194dd77fc93f321ff81565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806108a357506108a38261223a565b6000908152600360205260409020546001600160a01b0316151590565b3390565b600081815260056020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190611a2682610f74565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008581526010602052604090205460ff1615611a8e5760405162461bcd60e51b815260040161097a906137c6565b6000611ae57fc58b61fec2cd4de12178326c644460af93b446ff95aa30d194dd77fc93f321ff888888604051602001611aca9493929190613215565b604051602081830303815290604052805190602001206122dc565b90506000611af5828686866122ef565b9050611b217f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68261117c565b611b3d5760405162461bcd60e51b815260040161097a90613ae3565b611b697f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66106966119d5565b611b8e57600c543414611b8e5760405162461bcd60e51b815260040161097a906133b6565b600d546001600160a01b031615611c0d57600d546001600160a01b0316633f812ccc611bb86119d5565b8a8a8a6040518563ffffffff1660e01b8152600401611bda949392919061316c565b600060405180830381600087803b158015611bf457600080fd5b505af1158015611c08573d6000803e3d6000fd5b505050505b611c178888612143565b5050505050505050565b6000611c2c826119b8565b611c485760405162461bcd60e51b815260040161097a906135f5565b6000611c5383610f74565b9050806001600160a01b0316846001600160a01b03161480611c8e5750836001600160a01b0316611c8384610953565b6001600160a01b0316145b80611c9e5750611c9e81856118b2565b949350505050565b826001600160a01b0316611cb982610f74565b6001600160a01b031614611cdf5760405162461bcd60e51b815260040161097a906139cc565b6001600160a01b038216611d055760405162461bcd60e51b815260040161097a90613504565b611d108383836123e5565b611d1b6000826119d9565b6001600160a01b0383166000908152600460205260408120805460019290611d44908490613df3565b90915550506001600160a01b0382166000908152600460205260408120805460019290611d72908490613dc7565b909155505060008181526003602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611df682610f74565b9050611e04816000846123e5565b611e0f6000836119d9565b6001600160a01b0381166000908152600460205260408120805460019290611e38908490613df3565b909155505060008281526003602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b611eb4828261117c565b610c6e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611eeb6119d5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f39828261117c565b15610c6e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055611f6e6119d5565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b611fbd848484611ca6565b611fc984848484612485565b6115645760405162461bcd60e51b815260040161097a90613470565b6060600b80546108ba90613e36565b606081612035575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526108a6565b8160005b811561205f578061204981613e71565b91506120589050600a83613ddf565b9150612039565b60008167ffffffffffffffff81111561208857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120b2576020820181803683370190505b5090505b8415611c9e576120c7600183613df3565b91506120d4600a86613eaa565b6120df906030613dc7565b60f81b81838151811061210257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061213c600a86613ddf565b94506120b6565b6001600160a01b0382166121695760405162461bcd60e51b815260040161097a906138dd565b612172816119b8565b1561218f5760405162461bcd60e51b815260040161097a906134cd565b61219b600083836123e5565b6001600160a01b03821660009081526004602052604081208054600192906121c4908490613dc7565b909155505060008181526003602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806122cd57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108a357506108a3826125ce565b60006108a36122e9612624565b836126e7565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156123315760405162461bcd60e51b815260040161097a90613598565b8360ff16601b148061234657508360ff16601c145b6123625760405162461bcd60e51b815260040161097a90613880565b6000600186868686604051600081526020016040526040516123879493929190613265565b6020604051602081039080840390855afa1580156123a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166123dc5760405162461bcd60e51b815260040161097a906132c5565b95945050505050565b6123f083838361271a565b600f546001600160a01b031615610a3257600f546040517f4a3931490000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634a3931499061244e9086908690869060040161310c565b600060405180830381600087803b15801561246857600080fd5b505af115801561247c573d6000803e3d6000fd5b50505050505050565b6000612499846001600160a01b03166127a3565b156125c657836001600160a01b031663150b7a026124b56119d5565b8786866040518563ffffffff1660e01b81526004016124d79493929190613130565b602060405180830381600087803b1580156124f157600080fd5b505af1925050508015612521575060408051601f3d908101601f1916820190925261251e91810190612eec565b60015b61257b573d80801561254f576040519150601f19603f3d011682016040523d82523d6000602084013e612554565b606091505b5080516125735760405162461bcd60e51b815260040161097a90613470565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611c9e565b506001611c9e565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806108a357506108a3826127a9565b60007f000000000000000000000000000000000000000000000000000000000000000046141561267557507f000000000000000000000000000000000000000000000000000000000000000061093b565b6126e07f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006127f3565b905061093b565b600082826040516020016126fc9291906130c2565b60405160208183030381529060405280519060200120905092915050565b612725838383610a32565b6001600160a01b0383166127415761273c8161282d565b612764565b816001600160a01b0316836001600160a01b031614612764576127648382612871565b6001600160a01b0382166127805761277b8161290e565b610a32565b826001600160a01b0316826001600160a01b031614610a3257610a3282826129e7565b3b151590565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6000838383463060405160200161280e959493929190613239565b6040516020818303038152906040528051906020012090509392505050565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b6000600161287e84610fa9565b6128889190613df3565b6000838152600860205260409020549091508082146128db576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b60095460009061292090600190613df3565b6000838152600a60205260408120546009805493945090928490811061295657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806009838154811061298557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600a909152604080822084905585825281205560098054806129cb57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006129f283610fa9565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b828054612a3790613e36565b90600052602060002090601f016020900481019282612a595760008555612a9f565b82601f10612a725782800160ff19823516178555612a9f565b82800160010185558215612a9f579182015b82811115612a9f578235825591602001919060010190612a84565b50612aab929150612aaf565b5090565b5b80821115612aab5760008155600101612ab0565b80356001600160a01b03811681146108a657600080fd5b60008083601f840112612aec578182fd5b50813567ffffffffffffffff811115612b03578182fd5b602083019150836020828501011115612b1b57600080fd5b9250929050565b803560ff811681146108a657600080fd5b600060208284031215612b44578081fd5b6115e682612ac4565b60008060408385031215612b5f578081fd5b612b6883612ac4565b9150612b7660208401612ac4565b90509250929050565b600080600060608486031215612b93578081fd5b612b9c84612ac4565b9250612baa60208501612ac4565b9150604084013590509250925092565b60008060008060808587031215612bcf578081fd5b612bd885612ac4565b9350612be660208601612ac4565b925060408501359150606085013567ffffffffffffffff811115612c08578182fd5b8501601f81018713612c18578182fd5b8035612c2b612c2682613d9f565b613d6e565b818152886020838501011115612c3f578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215612c6f578182fd5b612c7883612ac4565b91506020830135612c8881613f00565b809150509250929050565b600080600060408486031215612ca7578283fd5b612cb084612ac4565b9250602084013567ffffffffffffffff811115612ccb578283fd5b612cd786828701612adb565b9497909650939450505050565b60008060408385031215612cf6578182fd5b612cff83612ac4565b946020939093013593505050565b60008060008060008060c08789031215612d25578384fd5b612d2e87612ac4565b95506020870135945060408701359350612d4a60608801612b22565b92506080870135915060a087013590509295509295509295565b60008060208385031215612d76578182fd5b823567ffffffffffffffff80821115612d8d578384fd5b818501915085601f830112612da0578384fd5b813581811115612dae578485fd5b8660208083028501011115612dc1578485fd5b60209290920196919550909350505050565b60006020808385031215612de5578182fd5b823567ffffffffffffffff80821115612dfc578384fd5b818501915085601f830112612e0f578384fd5b813581811115612e2157612e21613eea565b8381029150612e31848301613d6e565b8181528481019084860184860187018a1015612e4b578788fd5b8795505b83861015612e6d578035835260019590950194918601918601612e4f565b5098975050505050505050565b600060208284031215612e8b578081fd5b81516115e681613f00565b600060208284031215612ea7578081fd5b5035919050565b60008060408385031215612ec0578182fd5b82359150612b7660208401612ac4565b600060208284031215612ee1578081fd5b81356115e681613f0e565b600060208284031215612efd578081fd5b81516115e681613f0e565b600060208284031215612f19578081fd5b815167ffffffffffffffff811115612f2f578182fd5b8201601f81018413612f3f578182fd5b8051612f4d612c2682613d9f565b818152856020838501011115612f61578384fd5b6123dc826020830160208601613e0a565b60008060208385031215612f84578182fd5b823567ffffffffffffffff811115612f9a578283fd5b612fa685828601612adb565b90969095509350505050565b600060208284031215612fc3578081fd5b5051919050565b600080600080600060a08688031215612fe1578283fd5b8535945060208601359350612ff860408701612b22565b94979396509394606081013594506080013592915050565b60008151808452613028816020860160208601613e0a565b601f01601f19169290920160200192915050565b6000835161304e818460208801613e0a565b835190830190613062818360208801613e0a565b01949350505050565b7f426f75676874546865546f704e46543a20696e76616c696420746f6b656e206f81527f776e6572200000000000000000000000000000000000000000000000000000006020820152602581019190915260450190565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526131626080830184613010565b9695505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6000602082528260208301527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156131e6578081fd5b60208302808560408501379190910160400190815292915050565b901515815260200190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082526115e66020830184613010565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526024908201527f426f75676874546865546f704e46543a20696e76616c696420746f6b656e206f60408201527f776e657200000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b6020808252602c908201527f426f75676874546865546f704e46543a20696e636f7272656374206d696e742060408201527f6665652070726f76696465640000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201527f74206f6620626f756e6473000000000000000000000000000000000000000000606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f426f75676874546865546f704e46543a206d7573742068617665206465706f7360408201527f69746f7220726f6c650000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f426f75676874546865546f704e46543a20746f6b656e20657869737473206f6e60408201527f20726f6f7420636861696e000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526028908201527f426f75676874546865546f704e46543a206d757374206861766520776974686460408201527f72617720726f6c65000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201527f73206e6f74206f776e0000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560408201527f7200000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f426f75676874546865546f704e46543a206d7573742068617665206d696e746560408201527f7220726f6c650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f426f75676874546865546f704e46543a206d75737420686176652061646d696e60408201527f20726f6c65000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201527f7574206f6620626f756e64730000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000606082015260800190565b60208082526024908201527f426f75676874546865546f704e46543a2065786365656473206261746368206c60408201527f696d697400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d9757613d97613eea565b604052919050565b600067ffffffffffffffff821115613db957613db9613eea565b50601f01601f191660200190565b60008219821115613dda57613dda613ebe565b500190565b600082613dee57613dee613ed4565b500490565b600082821015613e0557613e05613ebe565b500390565b60005b83811015613e25578181015183820152602001613e0d565b838111156115645750506000910152565b600281046001821680613e4a57607f821691505b60208210811415613e6b57634e487b7160e01b600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ea357613ea3613ebe565b5060010190565b600082613eb957613eb9613ed4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610c3157600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610c3157600080fdfea2646970667358221220d142b956911d2dda0eebed3adc339f48e105cb59fc4c92d2828f367a4ef624bc64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator. - {burnAllowed} must be true"
      },
      "constructor": {
        "details": "Initialize contract, owner will be set to the account that deploys the contract."
      },
      "deposit(address,bytes)": {
        "details": "Should be callable only by ChildChainManager Should handle deposit by minting the required tokenId(s) for user Should set `withdrawnTokens` mapping to `false` for the tokenId being deposited Minting can also be done by other functions",
        "params": {
          "depositData": "abi encoded tokenIds. Batch deposit also supported.",
          "user": "user address for whom deposit is being done"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Creates a new token for caller with ID `tokenId` using an off-chain signature  See {ERC721-_mint}. Requirements: - caller is owner of token - {mintFee} wei sent with call if caller does not have `MINTER_ROLE` - signature v, r, s must be signed by account with `MINTER_ROLE`"
      },
      "mintTo(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Creates a new token for `to` with ID `tokenId` using an off-chain signature See {ERC721-_mint}. Requirements: - {mintFee} wei sent with call if caller does not have `MINTER_ROLE` - signature v, r, s must be signed by account with `MINTER_ROLE`"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "rescue(address)": {
        "details": "Rescue any ERC-20 token the contract may hold",
        "params": {
          "_token": "ERC-20 token address Requirements: - the caller must have the `WITHDRAW_ROLE`."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseTokenURI(string)": {
        "details": "Set the base URI for all tokens. See {ERC721-tokenURI} Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`."
      },
      "setMintFee(uint256)": {
        "details": "Set the fee to mint a new token. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`."
      },
      "setOnBurn(address)": {
        "details": "Set burn extra logic cotnract Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`."
      },
      "setOnMint(address)": {
        "details": "Set mint extra logic cotnract Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`."
      },
      "setOnTransfer(address)": {
        "details": "Set transfer extra logic contract Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "withdraw(uint256)": {
        "details": "Should handle withraw by burning user's token. Should set `withdrawnTokens` mapping to `true` for the tokenId being withdrawn This transaction will be verified when exiting on root chain",
        "params": {
          "tokenId": "tokenId to withdraw"
        }
      },
      "withdrawBatch(uint256[])": {
        "details": "Should burn user's tokens. This transaction will be verified when exiting on root chain",
        "params": {
          "tokenIds": "tokenId list to withdraw"
        }
      },
      "withdrawFees()": {
        "details": "Withdraw all accumulated ether from the contract Requirements: - the caller must have the `WITHDRAW_ROLE`."
      },
      "withdrawWithMetadata(uint256)": {
        "details": "Should handle withraw by burning user's token. Should set `withdrawnTokens` mapping to `true` for the tokenId being withdrawn This transaction will be verified when exiting on root chain",
        "params": {
          "tokenId": "tokenId to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BaseTokenURIChanged(string)": {
        "notice": "Emitted when the base token URI changes"
      },
      "FeesWithdrawn(uint256)": {
        "notice": "Emitted when fees are withdrawn"
      },
      "MintFeeChanged(uint256)": {
        "notice": "Emitted when the {mintFee} changes"
      },
      "OnBurnChanged(address)": {
        "notice": "Emitted when {onBurn} changes"
      },
      "OnMintChanged(address)": {
        "notice": "Emitted when {onMint} changes"
      },
      "OnTransferChanged(address)": {
        "notice": "Emitted when {onTransfer} changes"
      },
      "TransferWithMetadata(address,address,uint256,bytes)": {
        "notice": "Emitted when an NFT is withdrawn"
      },
      "WithdrawnBatch(address,uint256[])": {
        "notice": "Emitted when multiple NFTs are withdrawn"
      }
    },
    "kind": "user",
    "methods": {
      "BATCH_LIMIT()": {
        "notice": "Maxmimum number of NFTs that can be transferred in a batch due to gas limit restrictions"
      },
      "DEPOSITOR_ROLE()": {
        "notice": "Role identifier for cross-chain depositor"
      },
      "MINTER_ROLE()": {
        "notice": "Role identifer for minter"
      },
      "MINT_TYPEHASH()": {
        "notice": "EIP-712 typehash for mint"
      },
      "WITHDRAW_ROLE()": {
        "notice": "Role identifier for fee withdrawer"
      },
      "baseTokenURI()": {
        "notice": "Base of metdata URI"
      },
      "deposit(address,bytes)": {
        "notice": "called when token is deposited on root chain"
      },
      "encodeTokenMetadata(uint256)": {
        "notice": "This method is supposed to be called by client when withdrawing token with metadata and pass return value of this function as second paramter of `withdrawWithMetadata` method It can be overridden by clients to encode data in a different form, which needs to be decoded back by them correctly during exiting"
      },
      "mintFee()": {
        "notice": "Ether fee to mint a new NFT"
      },
      "onBurn()": {
        "notice": "Contract to handle extra burn logic"
      },
      "onMint()": {
        "notice": "Contract to handle extra mint logic"
      },
      "onTransfer()": {
        "notice": "Contract to handle extra transfer logic"
      },
      "withdraw(uint256)": {
        "notice": "called when user wants to withdraw token back to root chain"
      },
      "withdrawBatch(uint256[])": {
        "notice": "called when user wants to withdraw multiple tokens back to root chain"
      },
      "withdrawWithMetadata(uint256)": {
        "notice": "called when user wants to withdraw token back to root chain with token URI"
      },
      "withdrawnTokens(uint256)": {
        "notice": "NFTs that have been withdrawn to the root chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5184,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)5179_storage)"
      },
      {
        "astId": 2055,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2057,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2061,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2065,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2069,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2075,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2864,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2868,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2871,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2875,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "mintFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 30,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "onMint",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 33,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "onBurn",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 36,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "onTransfer",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 41,
        "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
        "label": "withdrawnTokens",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)5179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)5179_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)5179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 5176,
            "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5178,
            "contract": "contracts/BoughtTheTopNFTChild.sol:BoughtTheTopNFTChild",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}