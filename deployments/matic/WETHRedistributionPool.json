{
  "address": "0x1E507B29af0510fCDC45eaeE71A9C96682ca7feD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTION_ASSIGNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECOVER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        }
      ],
      "name": "setRewardDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x169f70ec5c04c9d88db47978d2ca3a392a4f3d61d3857d1ab3d772a2a7880419",
  "receipt": {
    "to": null,
    "from": "0x761496379064d3D49Da3b623017CB00421cc8980",
    "contractAddress": "0x1E507B29af0510fCDC45eaeE71A9C96682ca7feD",
    "transactionIndex": 16,
    "gasUsed": "1784520",
    "logsBloom": "0x
    "blockHash": "0x94ff3e63e6e0e3515ed056b5fb7f54a35be1550b84f857128ea3d34bc383df61",
    "transactionHash": "0x169f70ec5c04c9d88db47978d2ca3a392a4f3d61d3857d1ab3d772a2a7880419",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 13962145,
        "transactionHash": "0x169f70ec5c04c9d88db47978d2ca3a392a4f3d61d3857d1ab3d772a2a7880419",
        "address": "0x1E507B29af0510fCDC45eaeE71A9C96682ca7feD",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af787",
          "0x000000000000000000000000761496379064d3d49da3b623017cb00421cc8980",
          "0x000000000000000000000000761496379064d3d49da3b623017cb00421cc8980"
        ],
        "data": "0x",
        "logIndex": 63,
        "blockHash": "0x94ff3e63e6e0e3515ed056b5fb7f54a35be1550b84f857128ea3d34bc383df61"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 13962145,
        "transactionHash": "0x169f70ec5c04c9d88db47978d2ca3a392a4f3d61d3857d1ab3d772a2a7880419",
        "address": "0x1E507B29af0510fCDC45eaeE71A9C96682ca7feD",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000761496379064d3d49da3b623017cb00421cc8980",
          "0x000000000000000000000000761496379064d3d49da3b623017cb00421cc8980"
        ],
        "data": "0x",
        "logIndex": 64,
        "blockHash": "0x94ff3e63e6e0e3515ed056b5fb7f54a35be1550b84f857128ea3d34bc383df61"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 13962145,
        "transactionHash": "0x169f70ec5c04c9d88db47978d2ca3a392a4f3d61d3857d1ab3d772a2a7880419",
        "address": "0x1E507B29af0510fCDC45eaeE71A9C96682ca7feD",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e066",
          "0x000000000000000000000000761496379064d3d49da3b623017cb00421cc8980",
          "0x000000000000000000000000761496379064d3d49da3b623017cb00421cc8980"
        ],
        "data": "0x",
        "logIndex": 65,
        "blockHash": "0x94ff3e63e6e0e3515ed056b5fb7f54a35be1550b84f857128ea3d34bc383df61"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 13962145,
        "transactionHash": "0x169f70ec5c04c9d88db47978d2ca3a392a4f3d61d3857d1ab3d772a2a7880419",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000761496379064d3d49da3b623017cb00421cc8980",
          "0x000000000000000000000000e77bbfd8ed65720f187efdd109e38d75eaca7385"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000065702f0b1d00000000000000000000000000000000000000000000000000f9f6b928fe633f804000000000000000000000000000000000000000000000097ff4c5de2608bb57a00000000000000000000000000000000000000000000000f9f653b8cf5822804000000000000000000000000000000000000000000000097ff52b4e5513d857a",
        "logIndex": 66,
        "blockHash": "0x94ff3e63e6e0e3515ed056b5fb7f54a35be1550b84f857128ea3d34bc383df61"
      }
    ],
    "blockNumber": 13962145,
    "cumulativeGasUsed": "3561755",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x761496379064d3D49Da3b623017CB00421cc8980",
    "0x761496379064d3D49Da3b623017CB00421cc8980",
    "0x04AE4aE7F9af802DE5A2Da9561948F6f24D4b043",
    "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619"
  ],
  "solcInputHash": "a19a106491c6d4d9251b2084b4be963f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_ASSIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECOVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_admin\":\"The default role controller for \",\"_rewardDistribution\":\"The reward distributor (can change reward rate)\",\"_rewardToken\":\"The reward token to distribute\",\"_stakingToken\":\"The staking token used to qualify for rewards\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"notifyRewardAmount(uint256)\":{\"params\":{\"reward\":\"number of tokens to be distributed over the duration.\"}},\"recoverERC20(address,uint256)\":{\"details\":\"Sourced from synthetix/contracts/StakingRewards.sol\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"BoughtThe.top Redistribution Pool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Construct a new RedistributionPool\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"Should be called after the amount of reward tokens has been sent to the contract. Reward should be divisible by duration.\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Provide accidental token retrieval. \"}},\"notice\":\"This contract is used to reward `rewardToken` when `stakeToken` is staked.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RedistributionPool.sol\":\"RedistributionPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"contracts/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x208a653b3c4850786f94a1fa164579a3620a56097b138f02c3eccb393c214e13\",\"license\":\"MIT\"},\"contracts/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6e7ea141fb7fadb4a225c36ec975a654a46451b1ddbe89b7940da9afef7c502e\",\"license\":\"MIT\"},\"contracts/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.4.24;\\r\\n\\r\\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\\r\\ninterface IStakingRewards {\\r\\n    // Views\\r\\n    function lastTimeRewardApplicable() external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken() external view returns (uint256);\\r\\n\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    function getRewardForDuration() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    // Mutative\\r\\n\\r\\n    function stake(uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function exit() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa36eddaade8c87e5dd4ed4f1da84b4cf274527a6573d157babbc2d52cbcdb960\",\"license\":\"MIT\"},\"contracts/RedistributionPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./access/AccessControl.sol\\\";\\r\\nimport \\\"./utils/Context.sol\\\";\\r\\nimport \\\"./utils/math/Math.sol\\\";\\r\\nimport \\\"./utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"./IStakingRewards.sol\\\";\\r\\n\\r\\nimport \\\"./RewardDistributionRecipient.sol\\\";\\r\\n\\r\\n/**\\r\\n  @title BoughtThe.top Redistribution Pool\\r\\n  @notice This contract is used to reward `rewardToken` when `stakeToken` is staked.\\r\\n */\\r\\ncontract RedistributionPool is IStakingRewards, Context, AccessControl, RewardDistributionRecipient {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /* ========== CONSTANTS ========== */\\r\\n  uint256 public constant DURATION = 14 days;\\r\\n  bytes32 public constant RECOVER_ROLE = keccak256(\\\"RECOVER_ROLE\\\");\\r\\n\\r\\n  /* ========== STATE VARIABLES ========== */\\r\\n  IERC20 public rewardToken;\\r\\n  IERC20 public stakeToken;\\r\\n\\r\\n  uint256 public periodFinish = 0;\\r\\n  uint256 public rewardRate = 0;\\r\\n  uint256 public lastUpdateTime;\\r\\n  uint256 public rewardPerTokenStored;\\r\\n\\r\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\r\\n  mapping(address => uint256) public rewards;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n  mapping(address => uint256) private _balances;\\r\\n\\r\\n  /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n  /**\\r\\n    @notice Construct a new RedistributionPool\\r\\n    @param _admin The default role controller for \\r\\n    @param _rewardDistribution The reward distributor (can change reward rate)\\r\\n    @param _rewardToken The reward token to distribute\\r\\n    @param _stakingToken The staking token used to qualify for rewards\\r\\n   */\\r\\n  constructor(\\r\\n    address _admin,\\r\\n    address _rewardDistribution,\\r\\n    address _rewardToken,\\r\\n    address _stakingToken\\r\\n  ) RewardDistributionRecipient(_admin) {\\r\\n    rewardDistribution = _rewardDistribution;\\r\\n    rewardToken = IERC20(_rewardToken);\\r\\n    stakeToken = IERC20(_stakingToken);\\r\\n    \\r\\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\r\\n    _setupRole(RECOVER_ROLE, _admin);\\r\\n  }\\r\\n\\r\\n  /* ========== EVENTS ========== */\\r\\n\\r\\n  event RewardAdded(uint256 reward);\\r\\n  event Staked(address indexed user, uint256 amount);\\r\\n  event Withdrawn(address indexed user, uint256 amount);\\r\\n  event RewardPaid(address indexed user, uint256 reward);\\r\\n  event Recovered(address token, uint256 amount);\\r\\n\\r\\n  /* ========== MODIFIERS ========== */\\r\\n\\r\\n  modifier updateReward(address account) {\\r\\n    rewardPerTokenStored = rewardPerToken();\\r\\n    lastUpdateTime = lastTimeRewardApplicable();\\r\\n    if (account != address(0)) {\\r\\n      rewards[account] = earned(account);\\r\\n      userRewardPerTokenPaid[account] = rewardPerTokenStored;\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /* ========== VIEWS ========== */\\r\\n\\r\\n  function totalSupply() public override(IStakingRewards) view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) public override(IStakingRewards) view returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function lastTimeRewardApplicable() public override(IStakingRewards) view returns (uint256) {\\r\\n    return Math.min(block.timestamp, periodFinish);\\r\\n  }\\r\\n\\r\\n  function rewardPerToken() public override(IStakingRewards) view returns (uint256) {\\r\\n    if (totalSupply() == 0) {\\r\\n      return rewardPerTokenStored;\\r\\n    }\\r\\n\\r\\n    return\\r\\n      rewardPerTokenStored.add(\\r\\n        lastTimeRewardApplicable()\\r\\n          .sub(lastUpdateTime)\\r\\n          .mul(rewardRate)\\r\\n          .mul(1e18)\\r\\n          .div(totalSupply())\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function earned(address account) public override(IStakingRewards) view returns (uint256) {\\r\\n    return\\r\\n      balanceOf(account)\\r\\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\r\\n        .div(1e18)\\r\\n        .add(rewards[account]);\\r\\n  }\\r\\n\\r\\n  function getRewardForDuration() external override(IStakingRewards) view returns (uint256) {\\r\\n    return rewardRate.mul(DURATION);\\r\\n  }\\r\\n\\r\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n  function stake(uint256 amount) public virtual override(IStakingRewards) updateReward(msg.sender) {\\r\\n    require(amount > 0, \\\"RedistributionPool::stake: Cannot stake 0\\\");\\r\\n\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _balances[msg.sender] = _balances[msg.sender].add(amount);\\r\\n\\r\\n    stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    emit Staked(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 amount) public override(IStakingRewards) updateReward(msg.sender) {\\r\\n    require(amount > 0, \\\"RedistributionPool::withdraw: Cannot withdraw 0\\\");\\r\\n    _totalSupply = _totalSupply.sub(amount);\\r\\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\\r\\n    stakeToken.safeTransfer(msg.sender, amount);\\r\\n    emit Withdrawn(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function exit() external override(IStakingRewards) {\\r\\n    withdraw(balanceOf(msg.sender));\\r\\n    getReward();\\r\\n  }\\r\\n\\r\\n  function getReward() public virtual override(IStakingRewards) updateReward(msg.sender) {\\r\\n    uint256 reward = earned(msg.sender);\\r\\n    if (reward > 0) {\\r\\n      rewards[msg.sender] = 0;\\r\\n      rewardToken.safeTransfer(msg.sender, reward);\\r\\n      emit RewardPaid(msg.sender, reward);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n  /* ----- Reward Distributor ----- */\\r\\n\\r\\n  /**\\r\\n    @notice Should be called after the amount of reward tokens has\\r\\n     been sent to the contract.\\r\\n     Reward should be divisible by duration.\\r\\n    @param reward number of tokens to be distributed over the duration.\\r\\n   */\\r\\n  function notifyRewardAmount(uint256 reward)\\r\\n    external\\r\\n    override\\r\\n    onlyRewardDistribution\\r\\n    updateReward(address(0))\\r\\n  {\\r\\n    if (block.timestamp >= periodFinish) {\\r\\n      rewardRate = reward.div(DURATION);\\r\\n    } else {\\r\\n      uint256 remaining = periodFinish.sub(block.timestamp);\\r\\n      uint256 leftover = remaining.mul(rewardRate);\\r\\n      rewardRate = reward.add(leftover).div(DURATION);\\r\\n    }\\r\\n\\r\\n    // Ensure provided reward amount is not more than the balance in the contract.\\r\\n    // Keeps reward rate within the right range to prevent overflows in earned or rewardsPerToken\\r\\n    // Reward + leftover < 1e18\\r\\n    uint256 balance = rewardToken.balanceOf(address(this));\\r\\n    require(\\r\\n      rewardRate <= balance.div(DURATION), \\r\\n      \\\"RedistributionPool::notifyRewardAmount: Insufficent balance for reward rate\\\"\\r\\n    );\\r\\n\\r\\n    lastUpdateTime = block.timestamp;\\r\\n    periodFinish = block.timestamp.add(DURATION);\\r\\n    emit RewardAdded(reward);\\r\\n  }\\r\\n\\r\\n  /* ----- RECOVER_ROLE ----- */\\r\\n\\r\\n  /**\\r\\n    @notice Provide accidental token retrieval. \\r\\n    @dev Sourced from synthetix/contracts/StakingRewards.sol\\r\\n   */\\r\\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external {\\r\\n    require(\\r\\n      hasRole(RECOVER_ROLE, _msgSender()), \\r\\n      \\\"RedistributionPool::recoverERC20: You must possess the recover role to recover erc20\\\"\\r\\n    );\\r\\n    require(\\r\\n      tokenAddress != address(stakeToken), \\r\\n      \\\"RedistributionPool::recoverERC20: Cannot recover the staking token\\\"\\r\\n    );\\r\\n    require(\\r\\n      tokenAddress != address(rewardToken), \\r\\n      \\\"RedistributionPool::recoverERC20: Cannot recover the reward token\\\"\\r\\n    );\\r\\n\\r\\n    IERC20(tokenAddress).safeTransfer(_msgSender(), tokenAmount);\\r\\n    emit Recovered(tokenAddress, tokenAmount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x4f74f33769eef48a4b8c851b7ecbf20e860e7cb665ac74188f91807c70da5933\",\"license\":\"MIT\"},\"contracts/RewardDistributionRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./access/AccessControl.sol\\\";\\r\\nimport \\\"./utils/Context.sol\\\";\\r\\n\\r\\nabstract contract RewardDistributionRecipient is Context, AccessControl {\\r\\n    bytes32 public constant DISTRIBUTION_ASSIGNER_ROLE = keccak256(\\\"DISTRIBUTION_ASSIGNER_ROLE\\\");\\r\\n\\r\\n    address public rewardDistribution;\\r\\n\\r\\n    constructor(address assigner) {\\r\\n        _setupRole(DISTRIBUTION_ASSIGNER_ROLE, assigner);\\r\\n    }\\r\\n\\r\\n    modifier onlyRewardDistribution() {\\r\\n        require(\\r\\n            _msgSender() == rewardDistribution,\\r\\n            \\\"RewardDisributionRecipient::onlyRewardDistribution: Caller is not RewardsDistribution contract\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    /* ----- rewardDistribution ----- */\\r\\n\\r\\n    function notifyRewardAmount(uint256 reward) external virtual;\\r\\n\\r\\n    /* ----- DISTRIBUTION_ASSIGNER_ROLE ----- */\\r\\n\\r\\n    function setRewardDistribution(address _rewardDistribution)\\r\\n        external\\r\\n    {\\r\\n        require(\\r\\n            hasRole(DISTRIBUTION_ASSIGNER_ROLE, _msgSender()),\\r\\n            \\\"RewardDistributionRecipient::setRewardDistribution: must have distribution assigner role\\\"\\r\\n        );\\r\\n        rewardDistribution = _rewardDistribution;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4db52d2f99ee0b422189391caa8462a8e99b24679371d6d3a72c141b64b25660\",\"license\":\"MIT\"},\"contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControl {\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n    function grantRole(bytes32 role, address account) external;\\r\\n    function revokeRole(bytes32 role, address account) external;\\r\\n    function renounceRole(bytes32 role, address account) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\r\\n    struct RoleData {\\r\\n        mapping (address => bool) members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping (bytes32 => RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IAccessControl).interfaceId\\r\\n            || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\r\\n        return _roles[role].members[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual override {\\r\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\r\\n\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual override {\\r\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual override {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n    }\\r\\n\\r\\n    function _grantRole(bytes32 role, address account) private {\\r\\n        if (!hasRole(role, account)) {\\r\\n            _roles[role].members[account] = true;\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revokeRole(bytes32 role, address account) private {\\r\\n        if (hasRole(role, account)) {\\r\\n            _roles[role].members[account] = false;\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5280fcd7ad723a1e6fd67b02f1c76764b49f97994323464d5eabf7dc5428ae6b\",\"license\":\"MIT\"},\"contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x56c55493b8912cb4729acd8a226a37dfb815c104cb57536a899bdaa708b45e1c\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd66de64ebb51d57721ac10bb1571dc8b2798cd48723b8222341bc0e65372e050\",\"license\":\"MIT\"},\"contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x071cfd008ed1810ddf23f56bd1ce2f0c3983bc291559067e94618547f579e1f2\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x7e30ce048ac2ce3cc97d725487ed5a82192bb939456f46e0cbe38f1b48644f9e\",\"license\":\"MIT\"},\"contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute\\r\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf1848de74e270d74781176ea7a43739e403d69483fb72a2eb062838bbbd741dc\",\"license\":\"MIT\"},\"contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc27c53ee27aba4777c424234773faa8e2ca7a7755e5e3b4e0fe329858c988412\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060045560006005553480156200001b57600080fd5b5060405162001eff38038062001eff8339810160408190526200003e91620001d0565b836200006b7f32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af78782620000ec565b50600180546001600160a01b038086166001600160a01b031992831617909255600280548584169083161790556003805492841692909116919091179055620000b6600085620000ec565b620000e27f62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e06685620000ec565b505050506200022c565b620000f88282620000fc565b5050565b62000108828262000186565b620000f8576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000142620001af565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3390565b80516001600160a01b0381168114620001cb57600080fd5b919050565b60008060008060808587031215620001e6578384fd5b620001f185620001b3565b93506200020160208601620001b3565b92506200021160408601620001b3565b91506200022160608601620001b3565b905092959194509250565b611cc3806200023c6000396000f3fe608060405234801561001057600080fd5b50600436106101ef5760003560e01c80637b0a47ee1161010f578063c8f33c91116100a2578063df136d6511610071578063df136d65146103ab578063e9fad8ee146103b3578063ebe2b12b146103bb578063f7c618c1146103c3576101ef565b8063c8f33c9114610380578063cd3daf9d14610388578063d2ef3d0f14610390578063d547741f14610398576101ef565b806391d14854116100de57806391d148541461034a578063939bcbc91461035d578063a217fddf14610365578063a694fc3a1461036d576101ef565b80637b0a47ee1461031457806380faa57d1461031c5780638980f11f146103245780638b87634714610337576101ef565b8063248a9ca3116101875780633c6b16ab116101565780633c6b16ab146102de5780633d18b912146102f157806351ed6a30146102f957806370a0823114610301576101ef565b8063248a9ca3146102925780632e1a7d4d146102a55780632f2ff15d146102b857806336568abe146102cb576101ef565b8063101114cf116101c3578063101114cf1461026557806318160ddd1461027a5780631be05289146102825780631c1f78eb1461028a576101ef565b80628cc262146101f457806301ffc9a71461021d5780630700037d1461023d5780630d68b76114610250575b600080fd5b6102076102023660046113c2565b6103cb565b604051610214919061155f565b60405180910390f35b61023061022b366004611468565b610448565b6040516102149190611554565b61020761024b3660046113c2565b61049e565b61026361025e3660046113c2565b6104b0565b005b61026d610548565b60405161021491906114dc565b610207610564565b61020761056b565b610207610572565b6102076102a0366004611425565b61058a565b6102636102b3366004611425565b61059f565b6102636102c636600461143d565b6106e9565b6102636102d936600461143d565b610727565b6102636102ec366004611425565b610783565b6102636109d7565b61026d610adb565b61020761030f3660046113c2565b610af7565b610207610b1f565b610207610b25565b6102636103323660046113dc565b610b33565b6102076103453660046113c2565b610c57565b61023061035836600461143d565b610c69565b610207610c9f565b610207610cc3565b61026361037b366004611425565b610cc8565b610207610e07565b610207610e0d565b610207610e5b565b6102636103a636600461143d565b610e7f565b610207610ea7565b610263610ead565b610207610ec3565b61026d610ec9565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600960209081526040808320546008909252822054610440919061043a90670de0b6b3a764000090610434906104259061041f610e0d565b90610ee5565b61042e88610af7565b90610ef8565b90610f04565b90610f10565b90505b919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610440575061044082610f1c565b60096020526000908152604090205481565b6104dc7f32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af787610358610f66565b6105015760405162461bcd60e51b81526004016104f8906116f6565b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600a545b90565b6212750081565b6005546000906105859062127500610ef8565b905090565b60009081526020819052604090206001015490565b336105a8610e0d565b6007556105b3610b25565b60065573ffffffffffffffffffffffffffffffffffffffff811615610614576105db816103cb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b600082116106345760405162461bcd60e51b81526004016104f8906118b6565b600a546106419083610ee5565b600a55336000908152600b602052604090205461065e9083610ee5565b336000818152600b60205260409020919091556003546106979173ffffffffffffffffffffffffffffffffffffffff9091169084610f6a565b3373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516106dd919061155f565b60405180910390a25050565b6106fd6106f58361058a565b610358610f66565b6107195760405162461bcd60e51b81526004016104f8906115b9565b6107238282611010565b5050565b61072f610f66565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107795760405162461bcd60e51b81526004016104f890611b30565b61072382826110da565b60015473ffffffffffffffffffffffffffffffffffffffff166107a4610f66565b73ffffffffffffffffffffffffffffffffffffffff16146107d75760405162461bcd60e51b81526004016104f890611996565b60006107e1610e0d565b6007556107ec610b25565b60065573ffffffffffffffffffffffffffffffffffffffff81161561084d57610814816103cb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b600454421061086b576108638262127500610f04565b6005556108ad565b60045460009061087b9042610ee5565b9050600061089460055483610ef890919063ffffffff16565b90506108a7621275006104348684610f10565b60055550505b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906370a08231906109049030906004016114dc565b60206040518083038186803b15801561091c57600080fd5b505afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095491906114a8565b90506109638162127500610f04565b60055411156109845760405162461bcd60e51b81526004016104f890611616565b4260068190556109979062127500610f10565b6004556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906109ca90859061155f565b60405180910390a1505050565b336109e0610e0d565b6007556109eb610b25565b60065573ffffffffffffffffffffffffffffffffffffffff811615610a4c57610a13816103cb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b6000610a57336103cb565b905080156107235733600081815260096020526040812055600254610a959173ffffffffffffffffffffffffffffffffffffffff9091169083610f6a565b3373ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040516106dd919061155f565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b60055481565b6000610585426004546111a2565b610b5f7f62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e066610358610f66565b610b7b5760405162461bcd60e51b81526004016104f890611913565b60035473ffffffffffffffffffffffffffffffffffffffff83811691161415610bb65760405162461bcd60e51b81526004016104f890611aad565b60025473ffffffffffffffffffffffffffffffffffffffff83811691161415610bf15760405162461bcd60e51b81526004016104f8906117d6565b610c1a610bfc610f66565b73ffffffffffffffffffffffffffffffffffffffff84169083610f6a565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288282604051610c4b92919061152e565b60405180910390a15050565b60086020526000908152604090205481565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b7f62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e06681565b600081565b33610cd1610e0d565b600755610cdc610b25565b60065573ffffffffffffffffffffffffffffffffffffffff811615610d3d57610d04816103cb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b60008211610d5d5760405162461bcd60e51b81526004016104f890611699565b600a54610d6a9083610f10565b600a55336000908152600b6020526040902054610d879083610f10565b336000818152600b6020526040902091909155600354610dc19173ffffffffffffffffffffffffffffffffffffffff9091169030856111b8565b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516106dd919061155f565b60065481565b6000610e17610564565b610e245750600754610568565b610585610e52610e32610564565b610434670de0b6b3a764000061042e60055461042e60065461041f610b25565b60075490610f10565b7f32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af78781565b610e8b6106f58361058a565b6107795760405162461bcd60e51b81526004016104f890611859565b60075481565b610eb96102b333610af7565b610ec16109d7565b565b60045481565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6000610ef18284611c1b565b9392505050565b6000610ef18284611bde565b6000610ef18284611ba5565b6000610ef18284611b8d565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b3390565b61100b8363a9059cbb60e01b8484604051602401610f8992919061152e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526111df565b505050565b61101a8282610c69565b6107235760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561107c610f66565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110e48282610c69565b156107235760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055611144610f66565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60008183106111b15781610ef1565b5090919050565b6111d9846323b872dd60e01b858585604051602401610f89939291906114fd565b50505050565b6000611241826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661127b9092919063ffffffff16565b80519091501561100b578080602001905181019061125f9190611405565b61100b5760405162461bcd60e51b81526004016104f890611a50565b606061128a8484600085611292565b949350505050565b6060824710156112b45760405162461bcd60e51b81526004016104f890611779565b6112bd8561135f565b6112d95760405162461bcd60e51b81526004016104f890611a19565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161130291906114c0565b60006040518083038185875af1925050503d806000811461133f576040519150601f19603f3d011682016040523d82523d6000602084013e611344565b606091505b5091509150611354828286611365565b979650505050505050565b3b151590565b60608315611374575081610ef1565b8251156113845782518084602001fd5b8160405162461bcd60e51b81526004016104f89190611568565b803573ffffffffffffffffffffffffffffffffffffffff8116811461044357600080fd5b6000602082840312156113d3578081fd5b610ef18261139e565b600080604083850312156113ee578081fd5b6113f78361139e565b946020939093013593505050565b600060208284031215611416578081fd5b81518015158114610ef1578182fd5b600060208284031215611436578081fd5b5035919050565b6000806040838503121561144f578182fd5b8235915061145f6020840161139e565b90509250929050565b600060208284031215611479578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ef1578182fd5b6000602082840312156114b9578081fd5b5051919050565b600082516114d2818460208701611c32565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b6000602082528251806020840152611587816040850160208701611c32565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b6020808252604b908201527f5265646973747269627574696f6e506f6f6c3a3a6e6f7469667952657761726460408201527f416d6f756e743a20496e737566666963656e742062616c616e636520666f722060608201527f7265776172642072617465000000000000000000000000000000000000000000608082015260a00190565b60208082526029908201527f5265646973747269627574696f6e506f6f6c3a3a7374616b653a2043616e6e6f60408201527f74207374616b6520300000000000000000000000000000000000000000000000606082015260800190565b60208082526058908201527f526577617264446973747269627574696f6e526563697069656e743a3a73657460408201527f526577617264446973747269627574696f6e3a206d757374206861766520646960608201527f73747269627574696f6e2061737369676e657220726f6c650000000000000000608082015260a00190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526041908201527f5265646973747269627574696f6e506f6f6c3a3a7265636f766572455243323060408201527f3a2043616e6e6f74207265636f766572207468652072657761726420746f6b6560608201527f6e00000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b6020808252602f908201527f5265646973747269627574696f6e506f6f6c3a3a77697468647261773a20436160408201527f6e6e6f7420776974686472617720300000000000000000000000000000000000606082015260800190565b60208082526054908201527f5265646973747269627574696f6e506f6f6c3a3a7265636f766572455243323060408201527f3a20596f75206d75737420706f737365737320746865207265636f766572207260608201527f6f6c6520746f207265636f766572206572633230000000000000000000000000608082015260a00190565b6020808252605e908201527f5265776172644469737269627574696f6e526563697069656e743a3a6f6e6c7960408201527f526577617264446973747269627574696f6e3a2043616c6c6572206973206e6f60608201527f742052657761726473446973747269627574696f6e20636f6e74726163740000608082015260a00190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526042908201527f5265646973747269627574696f6e506f6f6c3a3a7265636f766572455243323060408201527f3a2043616e6e6f74207265636f76657220746865207374616b696e6720746f6b60608201527f656e000000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b60008219821115611ba057611ba0611c5e565b500190565b600082611bd9577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c1657611c16611c5e565b500290565b600082821015611c2d57611c2d611c5e565b500390565b60005b83811015611c4d578181015183820152602001611c35565b838111156111d95750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220cde68cebc6bcf5826a03b689bdded8f0e33e12ee0b3b106709c9baf6aca9ebec64736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ef5760003560e01c80637b0a47ee1161010f578063c8f33c91116100a2578063df136d6511610071578063df136d65146103ab578063e9fad8ee146103b3578063ebe2b12b146103bb578063f7c618c1146103c3576101ef565b8063c8f33c9114610380578063cd3daf9d14610388578063d2ef3d0f14610390578063d547741f14610398576101ef565b806391d14854116100de57806391d148541461034a578063939bcbc91461035d578063a217fddf14610365578063a694fc3a1461036d576101ef565b80637b0a47ee1461031457806380faa57d1461031c5780638980f11f146103245780638b87634714610337576101ef565b8063248a9ca3116101875780633c6b16ab116101565780633c6b16ab146102de5780633d18b912146102f157806351ed6a30146102f957806370a0823114610301576101ef565b8063248a9ca3146102925780632e1a7d4d146102a55780632f2ff15d146102b857806336568abe146102cb576101ef565b8063101114cf116101c3578063101114cf1461026557806318160ddd1461027a5780631be05289146102825780631c1f78eb1461028a576101ef565b80628cc262146101f457806301ffc9a71461021d5780630700037d1461023d5780630d68b76114610250575b600080fd5b6102076102023660046113c2565b6103cb565b604051610214919061155f565b60405180910390f35b61023061022b366004611468565b610448565b6040516102149190611554565b61020761024b3660046113c2565b61049e565b61026361025e3660046113c2565b6104b0565b005b61026d610548565b60405161021491906114dc565b610207610564565b61020761056b565b610207610572565b6102076102a0366004611425565b61058a565b6102636102b3366004611425565b61059f565b6102636102c636600461143d565b6106e9565b6102636102d936600461143d565b610727565b6102636102ec366004611425565b610783565b6102636109d7565b61026d610adb565b61020761030f3660046113c2565b610af7565b610207610b1f565b610207610b25565b6102636103323660046113dc565b610b33565b6102076103453660046113c2565b610c57565b61023061035836600461143d565b610c69565b610207610c9f565b610207610cc3565b61026361037b366004611425565b610cc8565b610207610e07565b610207610e0d565b610207610e5b565b6102636103a636600461143d565b610e7f565b610207610ea7565b610263610ead565b610207610ec3565b61026d610ec9565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600960209081526040808320546008909252822054610440919061043a90670de0b6b3a764000090610434906104259061041f610e0d565b90610ee5565b61042e88610af7565b90610ef8565b90610f04565b90610f10565b90505b919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610440575061044082610f1c565b60096020526000908152604090205481565b6104dc7f32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af787610358610f66565b6105015760405162461bcd60e51b81526004016104f8906116f6565b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600a545b90565b6212750081565b6005546000906105859062127500610ef8565b905090565b60009081526020819052604090206001015490565b336105a8610e0d565b6007556105b3610b25565b60065573ffffffffffffffffffffffffffffffffffffffff811615610614576105db816103cb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b600082116106345760405162461bcd60e51b81526004016104f8906118b6565b600a546106419083610ee5565b600a55336000908152600b602052604090205461065e9083610ee5565b336000818152600b60205260409020919091556003546106979173ffffffffffffffffffffffffffffffffffffffff9091169084610f6a565b3373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516106dd919061155f565b60405180910390a25050565b6106fd6106f58361058a565b610358610f66565b6107195760405162461bcd60e51b81526004016104f8906115b9565b6107238282611010565b5050565b61072f610f66565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107795760405162461bcd60e51b81526004016104f890611b30565b61072382826110da565b60015473ffffffffffffffffffffffffffffffffffffffff166107a4610f66565b73ffffffffffffffffffffffffffffffffffffffff16146107d75760405162461bcd60e51b81526004016104f890611996565b60006107e1610e0d565b6007556107ec610b25565b60065573ffffffffffffffffffffffffffffffffffffffff81161561084d57610814816103cb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b600454421061086b576108638262127500610f04565b6005556108ad565b60045460009061087b9042610ee5565b9050600061089460055483610ef890919063ffffffff16565b90506108a7621275006104348684610f10565b60055550505b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906370a08231906109049030906004016114dc565b60206040518083038186803b15801561091c57600080fd5b505afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095491906114a8565b90506109638162127500610f04565b60055411156109845760405162461bcd60e51b81526004016104f890611616565b4260068190556109979062127500610f10565b6004556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906109ca90859061155f565b60405180910390a1505050565b336109e0610e0d565b6007556109eb610b25565b60065573ffffffffffffffffffffffffffffffffffffffff811615610a4c57610a13816103cb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b6000610a57336103cb565b905080156107235733600081815260096020526040812055600254610a959173ffffffffffffffffffffffffffffffffffffffff9091169083610f6a565b3373ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040516106dd919061155f565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b60055481565b6000610585426004546111a2565b610b5f7f62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e066610358610f66565b610b7b5760405162461bcd60e51b81526004016104f890611913565b60035473ffffffffffffffffffffffffffffffffffffffff83811691161415610bb65760405162461bcd60e51b81526004016104f890611aad565b60025473ffffffffffffffffffffffffffffffffffffffff83811691161415610bf15760405162461bcd60e51b81526004016104f8906117d6565b610c1a610bfc610f66565b73ffffffffffffffffffffffffffffffffffffffff84169083610f6a565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288282604051610c4b92919061152e565b60405180910390a15050565b60086020526000908152604090205481565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b7f62b337eaefec74dadf1a62e856bf9db4f14a0f27d4f48156a95a9f98e7d5e06681565b600081565b33610cd1610e0d565b600755610cdc610b25565b60065573ffffffffffffffffffffffffffffffffffffffff811615610d3d57610d04816103cb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600960209081526040808320939093556007546008909152919020555b60008211610d5d5760405162461bcd60e51b81526004016104f890611699565b600a54610d6a9083610f10565b600a55336000908152600b6020526040902054610d879083610f10565b336000818152600b6020526040902091909155600354610dc19173ffffffffffffffffffffffffffffffffffffffff9091169030856111b8565b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516106dd919061155f565b60065481565b6000610e17610564565b610e245750600754610568565b610585610e52610e32610564565b610434670de0b6b3a764000061042e60055461042e60065461041f610b25565b60075490610f10565b7f32d611cddb9575a9b749d29624cab333eb23b65b17d0995589b5ce4fba0af78781565b610e8b6106f58361058a565b6107795760405162461bcd60e51b81526004016104f890611859565b60075481565b610eb96102b333610af7565b610ec16109d7565b565b60045481565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6000610ef18284611c1b565b9392505050565b6000610ef18284611bde565b6000610ef18284611ba5565b6000610ef18284611b8d565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b3390565b61100b8363a9059cbb60e01b8484604051602401610f8992919061152e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526111df565b505050565b61101a8282610c69565b6107235760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561107c610f66565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110e48282610c69565b156107235760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055611144610f66565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60008183106111b15781610ef1565b5090919050565b6111d9846323b872dd60e01b858585604051602401610f89939291906114fd565b50505050565b6000611241826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661127b9092919063ffffffff16565b80519091501561100b578080602001905181019061125f9190611405565b61100b5760405162461bcd60e51b81526004016104f890611a50565b606061128a8484600085611292565b949350505050565b6060824710156112b45760405162461bcd60e51b81526004016104f890611779565b6112bd8561135f565b6112d95760405162461bcd60e51b81526004016104f890611a19565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161130291906114c0565b60006040518083038185875af1925050503d806000811461133f576040519150601f19603f3d011682016040523d82523d6000602084013e611344565b606091505b5091509150611354828286611365565b979650505050505050565b3b151590565b60608315611374575081610ef1565b8251156113845782518084602001fd5b8160405162461bcd60e51b81526004016104f89190611568565b803573ffffffffffffffffffffffffffffffffffffffff8116811461044357600080fd5b6000602082840312156113d3578081fd5b610ef18261139e565b600080604083850312156113ee578081fd5b6113f78361139e565b946020939093013593505050565b600060208284031215611416578081fd5b81518015158114610ef1578182fd5b600060208284031215611436578081fd5b5035919050565b6000806040838503121561144f578182fd5b8235915061145f6020840161139e565b90509250929050565b600060208284031215611479578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ef1578182fd5b6000602082840312156114b9578081fd5b5051919050565b600082516114d2818460208701611c32565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b6000602082528251806020840152611587816040850160208701611c32565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b6020808252604b908201527f5265646973747269627574696f6e506f6f6c3a3a6e6f7469667952657761726460408201527f416d6f756e743a20496e737566666963656e742062616c616e636520666f722060608201527f7265776172642072617465000000000000000000000000000000000000000000608082015260a00190565b60208082526029908201527f5265646973747269627574696f6e506f6f6c3a3a7374616b653a2043616e6e6f60408201527f74207374616b6520300000000000000000000000000000000000000000000000606082015260800190565b60208082526058908201527f526577617264446973747269627574696f6e526563697069656e743a3a73657460408201527f526577617264446973747269627574696f6e3a206d757374206861766520646960608201527f73747269627574696f6e2061737369676e657220726f6c650000000000000000608082015260a00190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526041908201527f5265646973747269627574696f6e506f6f6c3a3a7265636f766572455243323060408201527f3a2043616e6e6f74207265636f766572207468652072657761726420746f6b6560608201527f6e00000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b6020808252602f908201527f5265646973747269627574696f6e506f6f6c3a3a77697468647261773a20436160408201527f6e6e6f7420776974686472617720300000000000000000000000000000000000606082015260800190565b60208082526054908201527f5265646973747269627574696f6e506f6f6c3a3a7265636f766572455243323060408201527f3a20596f75206d75737420706f737365737320746865207265636f766572207260608201527f6f6c6520746f207265636f766572206572633230000000000000000000000000608082015260a00190565b6020808252605e908201527f5265776172644469737269627574696f6e526563697069656e743a3a6f6e6c7960408201527f526577617264446973747269627574696f6e3a2043616c6c6572206973206e6f60608201527f742052657761726473446973747269627574696f6e20636f6e74726163740000608082015260a00190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526042908201527f5265646973747269627574696f6e506f6f6c3a3a7265636f766572455243323060408201527f3a2043616e6e6f74207265636f76657220746865207374616b696e6720746f6b60608201527f656e000000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b60008219821115611ba057611ba0611c5e565b500190565b600082611bd9577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c1657611c16611c5e565b500290565b600082821015611c2d57611c2d611c5e565b500390565b60005b83811015611c4d578181015183820152602001611c35565b838111156111d95750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220cde68cebc6bcf5826a03b689bdded8f0e33e12ee0b3b106709c9baf6aca9ebec64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_admin": "The default role controller for ",
          "_rewardDistribution": "The reward distributor (can change reward rate)",
          "_rewardToken": "The reward token to distribute",
          "_stakingToken": "The staking token used to qualify for rewards"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "notifyRewardAmount(uint256)": {
        "params": {
          "reward": "number of tokens to be distributed over the duration."
        }
      },
      "recoverERC20(address,uint256)": {
        "details": "Sourced from synthetix/contracts/StakingRewards.sol"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "BoughtThe.top Redistribution Pool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Construct a new RedistributionPool"
      },
      "notifyRewardAmount(uint256)": {
        "notice": "Should be called after the amount of reward tokens has been sent to the contract. Reward should be divisible by duration."
      },
      "recoverERC20(address,uint256)": {
        "notice": "Provide accidental token retrieval. "
      }
    },
    "notice": "This contract is used to reward `rewardToken` when `stakeToken` is staked.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4962,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4957_storage)"
      },
      {
        "astId": 4113,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "rewardDistribution",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3531,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1804"
      },
      {
        "astId": 3534,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "stakeToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1804"
      },
      {
        "astId": 3537,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "periodFinish",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3540,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "rewardRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3542,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3544,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3548,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3552,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "rewards",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3554,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3558,
        "contract": "contracts/RedistributionPool.sol:RedistributionPool",
        "label": "_balances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1804": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4957_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4957_storage"
      },
      "t_struct(RoleData)4957_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4954,
            "contract": "contracts/RedistributionPool.sol:RedistributionPool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4956,
            "contract": "contracts/RedistributionPool.sol:RedistributionPool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}